
/*  A Bison parser, made from cmdgram.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse CMDparse
#define yylex CMDlex
#define yyerror CMDerror
#define yylval CMDlval
#define yychar CMDchar
#define yydebug CMDdebug
#define yynerrs CMDnerrs
#define	rwDEFINE	258
#define	rwENDDEF	259
#define	rwDECLARE	260
#define	rwDECLARESINGLETON	261
#define	rwBREAK	262
#define	rwELSE	263
#define	rwCONTINUE	264
#define	rwGLOBAL	265
#define	rwIF	266
#define	rwNIL	267
#define	rwRETURN	268
#define	rwWHILE	269
#define	rwDO	270
#define	rwENDIF	271
#define	rwENDWHILE	272
#define	rwENDFOR	273
#define	rwDEFAULT	274
#define	rwFOR	275
#define	rwFOREACH	276
#define	rwFOREACHSTR	277
#define	rwIN	278
#define	rwDATABLOCK	279
#define	rwSWITCH	280
#define	rwCASE	281
#define	rwSWITCHSTR	282
#define	rwCASEOR	283
#define	rwPACKAGE	284
#define	rwNAMESPACE	285
#define	rwCLASS	286
#define	rwASSERT	287
#define	rwINT	288
#define	rwFLOAT	289
#define	rwSTRING	290
#define	rwBOOL	291
#define	rwVOID	292
#define	ILLEGAL_TOKEN	293
#define	CHRCONST	294
#define	INTCONST	295
#define	TTAG	296
#define	VAR	297
#define	IDENT	298
#define	TYPEIDENT	299
#define	DOCBLOCK	300
#define	STRATOM	301
#define	TAGATOM	302
#define	FLTCONST	303
#define	opINTNAME	304
#define	opINTNAMER	305
#define	opMINUSMINUS	306
#define	opPLUSPLUS	307
#define	STMT_SEP	308
#define	opSHL	309
#define	opSHR	310
#define	opPLASN	311
#define	opMIASN	312
#define	opMLASN	313
#define	opDVASN	314
#define	opMODASN	315
#define	opANDASN	316
#define	opXORASN	317
#define	opORASN	318
#define	opSLASN	319
#define	opSRASN	320
#define	opCAT	321
#define	opEQ	322
#define	opNE	323
#define	opGE	324
#define	opLE	325
#define	opAND	326
#define	opOR	327
#define	opSTREQ	328
#define	opCOLONCOLON	329
#define	opMDASN	330
#define	opNDASN	331
#define	opNTASN	332
#define	opSTRNE	333
#define	UNARY	334

#line 1 "cmdgram.y"


// bison --defines=cmdgram.h --verbose -o cmdgram.cpp -p CMD CMDgram.y

// Make sure we don't get gram.h twice.
#define _CMDGRAM_H_

#include <stdlib.h>
#include <stdio.h>
#include "console/console.h"
#include "console/compiler.h"
#include "console/consoleInternal.h"
#include "core/strings/stringFunctions.h"

#ifndef YYDEBUG
#define YYDEBUG 0
#endif

#define YYSSIZE 350

int outtext(char *fmt, ...);
extern int serrors;

#define nil 0
#undef YY_ARGS
#define YY_ARGS(x)   x

int CMDlex();
void CMDerror(char *, ...);

#ifdef alloca
#undef alloca
#endif
#define alloca dMalloc

template< typename T >
struct Token
{
   T value;
   U32 lineNumber;
};

#line 44 "cmdgram.y"

        /* Reserved Word Definitions */
#line 56 "cmdgram.y"

        /* Constants and Identifier Definitions */
#line 70 "cmdgram.y"

        /* Operator Definitions */

#line 83 "cmdgram.y"
typedef union {
   Token< char >           c;
   Token< int >            i;
   Token< const char* >    s;
   Token< char* >          str;
   Token< double >         f;
   StringTableEntry        ste;
   StmtNode*               stmt;
   ExprNode*               expr;
   SlotAssignNode*         slist;
   VarNode*                var;
   SlotDecl                slot;
   InternalSlotDecl        intslot;
   ObjectBlockDecl         odcl;
   ObjectDeclNode*         od;
   AssignDecl              asn;
   IfStmtNode*             ifnode;
   ParamNode*              param;
   AssignExprNode*         aen;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		424
#define	YYFLAG		-32768
#define	YYNTBASE	105

#define YYTRANSLATE(x) ((unsigned)(x) <= 334 ? yytranslate[x] : 149)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    69,     2,     2,     2,    59,    58,     2,    60,
    61,    51,    49,    62,    50,    56,    52,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    63,    64,    53,
    55,    54,   101,    70,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    97,     2,   104,    67,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    65,    57,    66,    68,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    98,
    99,   100,   102,   103
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     8,    10,    12,    19,    21,    24,
    25,    28,    30,    32,    34,    36,    38,    40,    43,    46,
    49,    53,    56,    61,    68,    70,    79,    90,   101,   114,
   115,   117,   119,   123,   127,   129,   140,   151,   159,   172,
   182,   193,   201,   202,   205,   206,   208,   209,   212,   213,
   215,   217,   220,   223,   227,   231,   233,   241,   249,   254,
   262,   268,   270,   274,   280,   288,   294,   301,   311,   320,
   329,   337,   346,   354,   362,   369,   377,   385,   387,   389,
   391,   395,   399,   403,   407,   411,   415,   419,   423,   427,
   430,   433,   435,   441,   445,   449,   453,   457,   461,   465,
   469,   473,   477,   481,   485,   489,   493,   496,   499,   501,
   503,   505,   507,   509,   511,   513,   515,   517,   522,   530,
   540,   544,   551,   555,   559,   561,   565,   567,   569,   572,
   575,   578,   581,   584,   587,   590,   593,   596,   599,   601,
   603,   605,   609,   613,   620,   623,   629,   632,   636,   642,
   648,   653,   660,   667,   672,   677,   684,   685,   687,   689,
   693,   694,   696,   698,   701,   706,   712,   717,   725,   734,
   736,   740,   742,   744,   746,   748,   750,   752
};

static const short yyrhs[] = {   106,
     0,     0,   106,   107,     0,   111,     0,   112,     0,   108,
     0,    29,    43,    65,   109,    66,    64,     0,   112,     0,
   109,   112,     0,     0,   110,   111,     0,   127,     0,   128,
     0,   129,     0,   130,     0,   116,     0,   124,     0,     7,
    64,     0,     9,    64,     0,    13,    64,     0,    13,   132,
    64,     0,   131,    64,     0,    41,    55,   132,    64,     0,
    41,    55,   132,    62,   132,    64,     0,    45,     0,     3,
    43,    60,   113,    61,    65,   110,    66,     0,     3,    43,
    60,   113,    61,    63,   148,    65,   110,    66,     0,     3,
    43,    96,    43,    60,   113,    61,    65,   110,    66,     0,
     3,    43,    96,    43,    60,   113,    61,    63,   148,    65,
   110,    66,     0,     0,   114,     0,   115,     0,   114,    62,
   115,     0,    42,    63,   147,     0,    42,     0,    24,   135,
    60,   132,   118,    61,    65,   143,    66,    64,     0,     5,
   135,    60,   119,   118,   120,    61,    65,   121,    66,     0,
     5,   135,    60,   119,   118,   120,    61,     0,     5,   135,
    60,    97,   119,   104,   118,   120,    61,    65,   121,    66,
     0,     5,   135,    60,    97,   119,   104,   118,   120,    61,
     0,     6,   135,    60,   119,   118,   120,    61,    65,   121,
    66,     0,     6,   135,    60,   119,   118,   120,    61,     0,
     0,    63,    43,     0,     0,   132,     0,     0,    62,   142,
     0,     0,   144,     0,   122,     0,   144,   122,     0,   117,
    64,     0,   122,   117,    64,     0,    65,   110,    66,     0,
   111,     0,    25,    60,   132,    61,    65,   125,    66,     0,
    27,    60,   132,    61,    65,   125,    66,     0,    26,   126,
    63,   110,     0,    26,   126,    63,   110,    19,    63,   110,
     0,    26,   126,    63,   110,   125,     0,   132,     0,   126,
    28,   132,     0,    11,    60,   132,    61,   123,     0,    11,
    60,   132,    61,   123,     8,   123,     0,    14,    60,   132,
    61,   123,     0,    15,   123,    14,    60,   132,    61,     0,
    20,    60,   132,    64,   132,    64,   132,    61,   123,     0,
    20,    60,   132,    64,   132,    64,    61,   123,     0,    20,
    60,   132,    64,    64,   132,    61,   123,     0,    20,    60,
   132,    64,    64,    61,   123,     0,    20,    60,    64,   132,
    64,   132,    61,   123,     0,    20,    60,    64,   132,    64,
    61,   123,     0,    20,    60,    64,    64,   132,    61,   123,
     0,    20,    60,    64,    64,    61,   123,     0,    21,    60,
    42,    23,   132,    61,   123,     0,    22,    60,    42,    23,
   132,    61,   123,     0,   137,     0,   138,     0,   137,     0,
    60,   132,    61,     0,   132,    67,   132,     0,   132,    59,
   132,     0,   132,    58,   132,     0,   132,    57,   132,     0,
   132,    49,   132,     0,   132,    50,   132,     0,   132,    51,
   132,     0,   132,    52,   132,     0,    50,   132,     0,    51,
   132,     0,    41,     0,   132,   101,   132,    63,   132,     0,
   132,    53,   132,     0,   132,    54,   132,     0,   132,    91,
   132,     0,   132,    92,   132,     0,   132,    89,   132,     0,
   132,    90,   132,     0,   132,    94,   132,     0,   132,    76,
   132,     0,   132,    77,   132,     0,   132,    93,   132,     0,
   132,    95,   132,     0,   132,   102,   132,     0,   132,    70,
   132,     0,    69,   132,     0,    68,   132,     0,    47,     0,
    48,     0,    40,     0,     7,     0,   133,     0,   134,     0,
    43,     0,    46,     0,    42,     0,    42,    97,   146,   104,
     0,     3,    60,   113,    61,    65,   110,    66,     0,     3,
    60,   113,    61,    63,   148,    65,   110,    66,     0,   132,
    56,    43,     0,   132,    56,    43,    97,   146,   104,     0,
   132,    71,   135,     0,   132,    72,   135,     0,    43,     0,
    60,   132,    61,     0,    74,     0,    73,     0,    78,   132,
     0,    79,   132,     0,    80,   132,     0,    81,   132,     0,
    82,   132,     0,    83,   132,     0,    84,   132,     0,    85,
   132,     0,    86,   132,     0,    87,   132,     0,   139,     0,
   140,     0,   117,     0,    42,    55,   132,     0,    60,   138,
    61,     0,    42,    97,   146,   104,    55,   132,     0,    42,
   136,     0,    42,    97,   146,   104,   136,     0,   133,   136,
     0,   133,    55,   132,     0,   133,    55,    65,   142,    66,
     0,    42,    63,   147,    55,   132,     0,    43,    60,   141,
    61,     0,    43,    96,    43,    60,   141,    61,     0,   132,
    56,    43,    60,   141,    61,     0,   132,    60,   141,    61,
     0,    32,    60,   132,    61,     0,    32,    60,   132,    62,
    46,    61,     0,     0,   142,     0,   132,     0,   142,    62,
   132,     0,     0,   144,     0,   145,     0,   144,   145,     0,
    43,    55,   132,    64,     0,    44,    43,    55,   132,    64,
     0,    24,    55,   132,    64,     0,    43,    97,   146,   104,
    55,   132,    64,     0,    44,    43,    97,   146,   104,    55,
   132,    64,     0,   132,     0,   146,    62,   132,     0,    33,
     0,    34,     0,    36,     0,    35,     0,    44,     0,   147,
     0,    37,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   169,   174,   176,   181,   183,   185,   190,   195,   197,   202,
   204,   209,   210,   211,   212,   213,   214,   215,   217,   219,
   221,   223,   225,   227,   229,   234,   236,   238,   240,   245,
   247,   252,   254,   259,   261,   266,   271,   273,   275,   277,
   279,   281,   286,   288,   293,   295,   300,   302,   307,   309,
   311,   313,   318,   320,   325,   327,   332,   334,   339,   341,
   343,   348,   350,   355,   357,   362,   364,   369,   371,   373,
   375,   377,   379,   381,   383,   388,   390,   395,   397,   402,
   404,   406,   408,   410,   412,   414,   416,   418,   420,   422,
   424,   426,   428,   430,   432,   434,   436,   438,   440,   442,
   444,   446,   448,   450,   452,   454,   456,   458,   460,   462,
   464,   466,   468,   470,   472,   474,   476,   478,   480,   495,
   513,   515,   520,   522,   527,   529,   534,   536,   538,   540,
   542,   544,   546,   548,   550,   552,   554,   556,   561,   563,
   565,   567,   569,   574,   576,   578,   580,   582,   584,   589,
   594,   596,   598,   600,   605,   607,   612,   614,   619,   621,
   626,   628,   633,   635,   640,   642,   644,   646,   648,   653,
   655,   660,   662,   664,   666,   668,   677,   679
};

static const char * const yytname[] = {   "$","error","$undefined.","rwDEFINE",
"rwENDDEF","rwDECLARE","rwDECLARESINGLETON","rwBREAK","rwELSE","rwCONTINUE",
"rwGLOBAL","rwIF","rwNIL","rwRETURN","rwWHILE","rwDO","rwENDIF","rwENDWHILE",
"rwENDFOR","rwDEFAULT","rwFOR","rwFOREACH","rwFOREACHSTR","rwIN","rwDATABLOCK",
"rwSWITCH","rwCASE","rwSWITCHSTR","rwCASEOR","rwPACKAGE","rwNAMESPACE","rwCLASS",
"rwASSERT","rwINT","rwFLOAT","rwSTRING","rwBOOL","rwVOID","ILLEGAL_TOKEN","CHRCONST",
"INTCONST","TTAG","VAR","IDENT","TYPEIDENT","DOCBLOCK","STRATOM","TAGATOM","FLTCONST",
"'+'","'-'","'*'","'/'","'<'","'>'","'='","'.'","'|'","'&'","'%'","'('","')'",
"','","':'","';'","'{'","'}'","'^'","'~'","'!'","'@'","opINTNAME","opINTNAMER",
"opMINUSMINUS","opPLUSPLUS","STMT_SEP","opSHL","opSHR","opPLASN","opMIASN","opMLASN",
"opDVASN","opMODASN","opANDASN","opXORASN","opORASN","opSLASN","opSRASN","opCAT",
"opEQ","opNE","opGE","opLE","opAND","opOR","opSTREQ","opCOLONCOLON","'['","opMDASN",
"opNDASN","opNTASN","'?'","opSTRNE","UNARY","']'","start","decl_list","decl",
"package_decl","fn_decl_list","statement_list","stmt","fn_decl_stmt","var_list_decl",
"var_list_typed","var_typed_decl","datablock_decl","object_decl","parent_block",
"object_name","object_args","object_declare_block","object_decl_list","stmt_block",
"switch_stmt","case_block","case_expr","if_stmt","while_stmt","for_stmt","foreach_stmt",
"expression_stmt","expr","slot_acc","intslot_acc","class_name_expr","assign_op_struct",
"stmt_expr","var_assign_expr","funcall_expr","assert_expr","expr_list_decl",
"expr_list","slot_assign_list_opt","slot_assign_list","slot_assign","aidx_expr",
"var_type","function_type",""
};
#endif

static const short yyr1[] = {     0,
   105,   106,   106,   107,   107,   107,   108,   109,   109,   110,
   110,   111,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   112,   112,   112,   112,   113,
   113,   114,   114,   115,   115,   116,   117,   117,   117,   117,
   117,   117,   118,   118,   119,   119,   120,   120,   121,   121,
   121,   121,   122,   122,   123,   123,   124,   124,   125,   125,
   125,   126,   126,   127,   127,   128,   128,   129,   129,   129,
   129,   129,   129,   129,   129,   130,   130,   131,   131,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   133,   133,   134,   134,   135,   135,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   137,   137,
   137,   137,   137,   137,   137,   137,   137,   137,   137,   138,
   139,   139,   139,   139,   140,   140,   141,   141,   142,   142,
   143,   143,   144,   144,   145,   145,   145,   145,   145,   146,
   146,   147,   147,   147,   147,   147,   148,   148
};

static const short yyr2[] = {     0,
     1,     0,     2,     1,     1,     1,     6,     1,     2,     0,
     2,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     3,     2,     4,     6,     1,     8,    10,    10,    12,     0,
     1,     1,     3,     3,     1,    10,    10,     7,    12,     9,
    10,     7,     0,     2,     0,     1,     0,     2,     0,     1,
     1,     2,     2,     3,     3,     1,     7,     7,     4,     7,
     5,     1,     3,     5,     7,     5,     6,     9,     8,     8,
     7,     8,     7,     7,     6,     7,     7,     1,     1,     1,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
     2,     1,     5,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     2,     2,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     4,     7,     9,
     3,     6,     3,     3,     1,     3,     1,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
     1,     3,     3,     6,     2,     5,     2,     3,     5,     5,
     4,     6,     6,     4,     4,     6,     0,     1,     1,     3,
     0,     1,     1,     2,     4,     5,     4,     7,     8,     1,
     3,     1,     1,     1,     1,     1,     1,     1
};

static const short yydefact[] = {     2,
     1,     0,     0,     0,   112,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   111,    92,
   117,   115,    25,   116,   109,   110,     0,     0,     0,     0,
     0,     3,     6,     4,     5,    16,   141,    17,    12,    13,
    14,    15,     0,     0,   113,   114,    80,    79,   139,   140,
     0,    30,   125,     0,     0,     0,    18,    19,     0,     0,
   112,    92,   117,    20,     0,    80,     0,    10,    56,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   128,   127,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   145,   157,     0,    90,    91,     0,
     0,   108,   107,    22,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   157,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   147,    30,     0,    35,     0,    31,    32,     0,    45,
    45,     0,    21,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   142,   172,   173,   175,
   174,   176,     0,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   170,     0,   159,     0,   158,     0,    81,
   143,    86,    87,    88,    89,    94,    95,   121,    85,    84,
    83,     0,    82,   106,   123,   124,   101,   102,    98,    99,
    96,    97,   103,   100,   104,     0,   105,     0,   148,     0,
     0,     0,     0,     0,   126,    45,    43,    46,    43,     0,
     0,    55,    11,     0,     0,     0,     0,     0,     0,    43,
     0,     0,     0,     0,     8,   155,     0,     0,    23,     0,
     0,   118,   151,     0,   157,   157,     0,   154,     0,     0,
     0,    30,    34,     0,    10,    33,     0,     0,    47,    47,
    64,    66,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     9,     0,     0,   150,   171,     0,
   146,   160,     0,     0,     0,    93,   149,     0,    10,     0,
   178,   177,     0,     0,    43,    44,     0,     0,     0,     0,
    67,    75,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     7,   156,    24,   144,   152,   153,
   122,     0,     0,     0,    10,   119,    47,    48,    38,    42,
    65,    74,    73,     0,    71,     0,     0,     0,    76,    77,
   161,     0,    62,    57,    58,    10,    26,     0,    10,     0,
     0,    49,    49,    72,    70,    69,     0,     0,     0,     0,
     0,   162,   163,     0,    10,     0,     0,     0,   120,    40,
     0,     0,    51,    50,     0,    68,     0,     0,     0,     0,
     0,   164,    63,    59,    27,    10,    28,    49,    53,    37,
     0,    52,    41,     0,     0,     0,     0,     0,    36,     0,
    61,     0,     0,    54,   167,   165,     0,     0,     0,    10,
    29,    39,     0,   166,     0,    60,     0,     0,   168,     0,
   169,     0,     0,     0
};

static const short yydefgoto[] = {   422,
     1,    32,    33,   234,   145,    69,    35,   136,   137,   138,
    36,    37,   259,   217,   298,   372,   373,    70,    38,   313,
   342,    39,    40,    41,    42,    43,    44,    45,    46,    55,
    95,    66,    48,    49,    50,   177,   178,   361,   374,   363,
   175,   292,   293
};

static const short yypact[] = {-32768,
   473,   116,   158,   158,   -53,   -34,   -16,   970,   -11,   523,
    15,    21,    22,   158,    46,    52,    17,    53,-32768,   109,
    99,   -37,-32768,-32768,-32768,-32768,  1279,  1279,  1328,  1279,
  1279,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   107,  2791,  3135,-32768,   123,-32768,-32768,-32768,
    14,   160,-32768,  1279,   140,   147,-32768,-32768,  1279,   155,
-32768,-32768,  3115,-32768,  1441,-32768,  1279,-32768,-32768,   202,
  1000,   182,   187,   166,  1279,  1279,   165,  1279,  1279,  1279,
   307,-32768,-32768,  1279,  1279,  1279,  1279,  1279,  1279,  1279,
  1279,  1279,  1279,  1279,-32768,  1279,   192,   244,   244,  1495,
   178,   244,   244,-32768,  1279,  1279,  1279,  1279,  1279,  1279,
   197,  1279,  1279,  1279,  1279,  1279,  1279,   158,   158,  1279,
  1279,  1279,  1279,  1279,  1279,  1279,  1279,  1279,  1279,  1279,
  1030,-32768,   160,   201,   183,   190,   186,-32768,  1549,   163,
  1279,  1603,-32768,  1657,   590,   185,  1060,  1711,   229,   236,
  1279,  1765,  1819,   259,  1333,  1387,  2791,-32768,-32768,-32768,
-32768,-32768,   211,  2791,  2791,  2791,  2791,  2791,  2791,  2791,
  2791,  2791,  2791,  2791,   -48,  2791,   206,   208,   214,-32768,
-32768,   213,   213,   244,   244,  3109,  3109,   -39,  2939,  3033,
   244,   207,  2986,   303,-32768,-32768,   340,   340,  3080,  3080,
  3109,  3109,   -25,  2892,   303,  1873,   303,  1279,  2791,   210,
   218,   307,    44,   160,-32768,  1279,   216,  2791,   216,   523,
   523,-32768,-32768,  1279,  1109,  1927,  1133,  1279,  1279,  1981,
   217,   223,   247,     5,-32768,-32768,   245,  1279,-32768,  1279,
  1279,  3150,-32768,  1279,  1279,  1279,  1279,-32768,  1279,    42,
   128,   160,-32768,   293,-32768,-32768,   188,   252,   234,   234,
   289,-32768,  2035,   523,  2089,  1182,  1206,  2143,  2197,  2251,
   237,   275,   275,   243,-32768,   249,  2305,  2791,  2791,  1279,
-32768,  2791,   251,   257,   -42,  2845,-32768,   293,-32768,   258,
-32768,-32768,   255,   640,   216,-32768,  1279,   263,   264,   523,
-32768,-32768,   523,   523,  2359,   523,  2413,  1255,   523,   523,
   266,  1279,   272,   273,-32768,-32768,-32768,  2791,-32768,-32768,
-32768,   267,   690,   129,-32768,-32768,   234,   208,   279,   280,
-32768,-32768,-32768,   523,-32768,   523,   523,  2467,-32768,-32768,
   131,   -13,  2791,-32768,-32768,-32768,-32768,   293,-32768,   740,
   285,   184,   184,-32768,-32768,-32768,   523,   292,   -36,   305,
   291,   131,-32768,  1279,-32768,   790,   295,   840,-32768,   296,
   294,   298,    49,   184,   304,-32768,  1279,  1279,  1279,    -7,
   308,-32768,  2791,   423,-32768,-32768,-32768,   184,-32768,-32768,
   312,    49,-32768,  2521,  2575,     7,  1279,  1279,-32768,   306,
-32768,   890,   311,-32768,-32768,-32768,   316,  2629,    16,-32768,
-32768,-32768,  1279,-32768,   323,   940,  2683,  1279,-32768,  2737,
-32768,   381,   382,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,  -198,     0,  -148,  -111,-32768,   171,
-32768,  -131,  -212,  -137,  -255,  -225,    19,   -23,-32768,  -232,
-32768,-32768,-32768,-32768,-32768,-32768,     9,-32768,-32768,    39,
   -43,    -1,   365,-32768,-32768,   -99,  -205,-32768,    54,  -209,
  -237,   -69,  -275
};


#define	YYLAST		3237


static const short yytable[] = {    47,
    34,   132,   250,   219,   299,   235,   260,   233,    47,   285,
    57,   163,   322,   241,   364,   192,    65,   271,   378,   241,
   246,   210,    96,   105,   106,   107,   108,   109,   110,    58,
   111,   112,   113,   114,   115,    98,    99,   100,   102,   103,
   314,   116,    56,    59,   117,   118,   119,   397,    67,   365,
   120,   121,    74,     3,     4,   242,   294,   247,    97,    77,
   379,   321,   139,   122,   123,   124,   125,   142,   241,   128,
   274,   351,   367,   133,    71,   144,   130,   241,   257,   148,
    72,    73,   327,   152,   153,   275,   155,   156,   157,   398,
   323,   328,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   244,   176,    75,   254,   287,   255,   134,
   407,    76,    78,   182,   183,   184,   185,   186,   187,   415,
   189,   190,   191,   176,   193,   194,   350,   375,   197,   198,
   199,   200,   201,   202,   203,   204,   205,   206,   207,   209,
   290,   396,   253,    47,   223,   283,   284,   366,   218,   218,
   368,   401,   382,    80,   358,   226,   195,   196,    51,   230,
   409,    81,   403,    79,   382,    60,   384,     3,     4,    61,
   104,    82,    83,   359,   360,    52,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,   -78,   402,     3,     4,
   288,   348,   289,   349,    18,    94,   261,   262,   281,   140,
    53,   135,    19,    62,    63,    22,   141,   358,    24,    25,
    26,   416,    27,    28,    52,   146,   176,    54,    47,    47,
   371,   371,    29,   149,   218,   151,   359,   360,   150,   154,
    30,    31,   263,   265,   179,   268,   269,   270,   181,   188,
   302,   391,   371,   211,   224,   212,   277,   214,   278,   279,
   213,   228,   282,   176,   176,   174,   371,   286,   229,   216,
   391,   233,    47,   107,   108,   240,   243,   248,   111,   244,
   251,   114,   115,   245,   305,   307,   331,   252,   258,   332,
   333,   272,   335,   118,   119,   339,   340,   273,   318,    51,
   276,   295,    47,   223,   296,   297,   300,   311,    47,   111,
   312,    47,    47,   115,    47,   176,   315,    47,    47,   316,
   354,   319,   355,   356,   118,   119,   338,   320,   324,   325,
   343,    47,   223,   329,   330,   158,   159,   160,   161,   291,
   341,   346,    47,   376,    47,    47,   162,   344,   345,   158,
   159,   160,   161,   352,   353,   370,   377,   380,    47,   223,
   162,   105,   106,   107,   108,    47,   381,   389,   111,   386,
   388,   114,   115,   390,    47,   223,    47,   223,   410,   393,
   413,   399,   383,   118,   119,   404,   412,   418,   120,   121,
   423,   424,    47,   223,   256,   394,   395,   174,   105,   106,
   107,   108,   392,   101,   362,   111,     0,     0,   114,   115,
    47,   223,     0,     0,     0,   408,   174,     0,     0,     0,
   118,   119,     0,     0,    47,   223,     0,     0,     0,     0,
     0,   417,     0,     0,     0,    60,   420,     3,     4,     5,
     0,     6,     0,     7,     0,     8,     9,    10,     0,     0,
     0,   400,    11,    12,    13,     0,    14,    15,   312,    16,
     0,     0,     0,     0,    18,     0,     0,     0,     0,     0,
     0,     0,    19,    20,    21,    22,     0,    23,    24,    25,
    26,     0,    27,    28,     0,     2,     0,     3,     4,     5,
     0,     6,    29,     7,     0,     8,     9,    10,     0,     0,
    30,    31,    11,    12,    13,     0,    14,    15,     0,    16,
     0,    17,     0,     0,    18,     0,     0,     0,     0,     0,
     0,     0,    19,    20,    21,    22,     0,    23,    24,    25,
    26,     0,    27,    28,     0,    60,     0,     3,     4,     5,
     0,     6,    29,     7,     0,     8,     9,    10,     0,     0,
    30,    31,    11,    12,    13,     0,    14,    15,     0,    16,
     0,     0,     0,     0,    18,     0,     0,     0,     0,     0,
     0,     0,    19,    20,    21,    22,     0,    23,    24,    25,
    26,     0,    27,    28,     0,     0,     0,     0,     0,     0,
     0,     0,    29,     0,     0,     0,     0,    68,     0,     0,
    30,    31,    60,     0,     3,     4,     5,     0,     6,     0,
     7,     0,     8,     9,    10,     0,     0,     0,     0,    11,
    12,    13,     0,    14,    15,     0,    16,     0,     0,     0,
     0,    18,     0,     0,     0,     0,     0,     0,     0,    19,
    20,    21,    22,     0,    23,    24,    25,    26,     0,    27,
    28,     0,    60,     0,     3,     4,     5,     0,     6,    29,
     7,     0,     8,     9,    10,   222,     0,    30,    31,    11,
    12,    13,     0,    14,    15,     0,    16,     0,     0,     0,
     0,    18,     0,     0,     0,     0,     0,     0,     0,    19,
    20,    21,    22,     0,    23,    24,    25,    26,     0,    27,
    28,     0,    60,     0,     3,     4,     5,     0,     6,    29,
     7,     0,     8,     9,    10,   326,     0,    30,    31,    11,
    12,    13,     0,    14,    15,     0,    16,     0,     0,     0,
     0,    18,     0,     0,     0,     0,     0,     0,     0,    19,
    20,    21,    22,     0,    23,    24,    25,    26,     0,    27,
    28,     0,    60,     0,     3,     4,     5,     0,     6,    29,
     7,     0,     8,     9,    10,   347,     0,    30,    31,    11,
    12,    13,     0,    14,    15,     0,    16,     0,     0,     0,
     0,    18,     0,     0,     0,     0,     0,     0,     0,    19,
    20,    21,    22,     0,    23,    24,    25,    26,     0,    27,
    28,     0,    60,     0,     3,     4,     5,     0,     6,    29,
     7,     0,     8,     9,    10,   369,     0,    30,    31,    11,
    12,    13,     0,    14,    15,     0,    16,     0,     0,     0,
     0,    18,     0,     0,     0,     0,     0,     0,     0,    19,
    20,    21,    22,     0,    23,    24,    25,    26,     0,    27,
    28,     0,    60,     0,     3,     4,     5,     0,     6,    29,
     7,     0,     8,     9,    10,   385,     0,    30,    31,    11,
    12,    13,     0,    14,    15,     0,    16,     0,     0,     0,
     0,    18,     0,     0,     0,     0,     0,     0,     0,    19,
    20,    21,    22,     0,    23,    24,    25,    26,     0,    27,
    28,     0,    60,     0,     3,     4,     5,     0,     6,    29,
     7,     0,     8,     9,    10,   387,     0,    30,    31,    11,
    12,    13,     0,    14,    15,     0,    16,     0,     0,     0,
     0,    18,     0,     0,     0,     0,     0,     0,     0,    19,
    20,    21,    22,     0,    23,    24,    25,    26,     0,    27,
    28,     0,    60,     0,     3,     4,     5,     0,     6,    29,
     7,     0,     8,     9,    10,   411,     0,    30,    31,    11,
    12,    13,     0,    14,    15,     0,    16,     0,     0,     0,
     0,    18,    60,     0,     3,     4,    61,     0,     0,    19,
    20,    21,    22,     0,    23,    24,    25,    26,     0,    27,
    28,     0,     0,     0,     0,     0,     0,     0,     0,    29,
     0,    18,    60,     0,     3,     4,    61,    30,    31,    19,
    62,    63,    22,     0,     0,    24,    25,    26,     0,    27,
    28,     0,     0,     0,     0,     0,     0,     0,     0,    29,
     0,    18,    60,    64,     3,     4,    61,    30,    31,    19,
    62,    63,    22,     0,     0,    24,    25,    26,     0,    27,
    28,     0,     0,     0,     0,     0,     0,     0,     0,    29,
     0,    18,    60,   147,     3,     4,    61,    30,    31,    19,
    62,    63,    22,     0,     0,    24,    25,    26,     0,    27,
    28,     0,     0,     0,     0,     0,     0,     0,     0,    29,
     0,    18,     0,     0,   208,     0,     0,    30,    31,    19,
    62,    63,    22,     0,     0,    24,    25,    26,     0,    27,
    28,    60,     0,     3,     4,    61,     0,     0,     0,    29,
     0,     0,     0,   225,     0,     0,     0,    30,    31,     0,
     0,     0,     0,     0,     0,    60,     0,     3,     4,    61,
    18,     0,     0,     0,     0,     0,     0,     0,    19,    62,
    63,    22,     0,     0,    24,    25,    26,     0,    27,    28,
     0,     0,     0,     0,    18,     0,     0,     0,    29,   264,
     0,     0,    19,    62,    63,    22,    30,    31,    24,    25,
    26,     0,    27,    28,    60,     0,     3,     4,    61,     0,
     0,     0,    29,     0,     0,     0,   267,     0,     0,     0,
    30,    31,     0,     0,     0,     0,     0,     0,    60,     0,
     3,     4,    61,    18,     0,     0,     0,     0,     0,     0,
     0,    19,    62,    63,    22,     0,     0,    24,    25,    26,
     0,    27,    28,     0,     0,     0,     0,    18,     0,     0,
     0,    29,   304,     0,     0,    19,    62,    63,    22,    30,
    31,    24,    25,    26,     0,    27,    28,    60,     0,     3,
     4,    61,     0,     0,     0,    29,   306,     0,     0,     0,
     0,     0,     0,    30,    31,     0,     0,     0,     0,     0,
     0,    60,     0,     3,     4,    61,    18,     0,     0,     0,
     0,     0,     0,     0,    19,    62,    63,    22,     0,     0,
    24,    25,    26,     0,    27,    28,     0,     0,     0,     0,
    18,     0,     0,     0,    29,   337,     0,     0,    19,    62,
    63,    22,    30,    31,    24,    25,    26,     0,    27,    28,
    60,     0,     3,     4,    61,     0,     0,     0,    29,     0,
     0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
     0,     0,     0,     0,     0,     0,     0,    19,    62,    21,
    22,     0,     0,    24,    25,    26,     0,    27,    28,     0,
     0,   105,   106,   107,   108,   109,   110,    29,   111,   112,
   113,   114,   115,   236,   237,    30,    31,     0,     0,   116,
     0,     0,   117,   118,   119,     0,     0,     0,   120,   121,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   122,   123,   124,   125,   126,   127,   128,     0,     0,
     0,     0,     0,   129,   130,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,   115,     0,   238,     0,
   239,     0,     0,   116,     0,     0,   117,   118,   119,     0,
     0,     0,   120,   121,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   122,   123,   124,   125,   126,
   127,   128,     0,     0,     0,     0,     0,   129,   130,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
   115,     0,     0,     0,   143,     0,     0,   116,     0,     0,
   117,   118,   119,     0,     0,     0,   120,   121,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
   123,   124,   125,   126,   127,   128,     0,     0,     0,     0,
     0,   129,   130,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,   115,   180,     0,     0,     0,     0,
     0,   116,     0,     0,   117,   118,   119,     0,     0,     0,
   120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     0,     0,     0,     0,     0,   129,   130,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,   115,   215,
     0,     0,     0,     0,     0,   116,     0,     0,   117,   118,
   119,     0,     0,     0,   120,   121,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
   125,   126,   127,   128,     0,     0,     0,     0,     0,   129,
   130,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,   115,   220,     0,     0,     0,     0,     0,   116,
     0,     0,   117,   118,   119,     0,     0,     0,   120,   121,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   122,   123,   124,   125,   126,   127,   128,     0,     0,
     0,     0,     0,   129,   130,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,   115,   221,     0,     0,
     0,     0,     0,   116,     0,     0,   117,   118,   119,     0,
     0,     0,   120,   121,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   122,   123,   124,   125,   126,
   127,   128,     0,     0,     0,     0,     0,   129,   130,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
   115,     0,     0,     0,   227,     0,     0,   116,     0,     0,
   117,   118,   119,     0,     0,     0,   120,   121,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
   123,   124,   125,   126,   127,   128,     0,     0,     0,     0,
     0,   129,   130,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,   115,   231,     0,     0,     0,     0,
     0,   116,     0,     0,   117,   118,   119,     0,     0,     0,
   120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     0,     0,     0,     0,     0,   129,   130,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,   115,   232,
     0,     0,     0,     0,     0,   116,     0,     0,   117,   118,
   119,     0,     0,     0,   120,   121,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
   125,   126,   127,   128,     0,     0,     0,     0,     0,   129,
   130,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,   115,     0,     0,   249,     0,     0,     0,   116,
     0,     0,   117,   118,   119,     0,     0,     0,   120,   121,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   122,   123,   124,   125,   126,   127,   128,     0,     0,
     0,     0,     0,   129,   130,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,   115,     0,     0,     0,
   266,     0,     0,   116,     0,     0,   117,   118,   119,     0,
     0,     0,   120,   121,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   122,   123,   124,   125,   126,
   127,   128,     0,     0,     0,     0,     0,   129,   130,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
   115,     0,     0,   258,     0,     0,     0,   116,     0,     0,
   117,   118,   119,     0,     0,     0,   120,   121,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
   123,   124,   125,   126,   127,   128,     0,     0,     0,     0,
     0,   129,   130,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,   115,   301,     0,     0,     0,     0,
     0,   116,     0,     0,   117,   118,   119,     0,     0,     0,
   120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     0,     0,     0,     0,     0,   129,   130,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,   115,   303,
     0,     0,     0,     0,     0,   116,     0,     0,   117,   118,
   119,     0,     0,     0,   120,   121,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
   125,   126,   127,   128,     0,     0,     0,     0,     0,   129,
   130,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,   115,     0,     0,     0,   308,     0,     0,   116,
     0,     0,   117,   118,   119,     0,     0,     0,   120,   121,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   122,   123,   124,   125,   126,   127,   128,     0,     0,
     0,     0,     0,   129,   130,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,   115,   309,     0,     0,
     0,     0,     0,   116,     0,     0,   117,   118,   119,     0,
     0,     0,   120,   121,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   122,   123,   124,   125,   126,
   127,   128,     0,     0,     0,     0,     0,   129,   130,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
   115,   310,     0,     0,     0,     0,     0,   116,     0,     0,
   117,   118,   119,     0,     0,     0,   120,   121,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
   123,   124,   125,   126,   127,   128,     0,     0,     0,     0,
     0,   129,   130,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,   115,     0,     0,     0,   317,     0,
     0,   116,     0,     0,   117,   118,   119,     0,     0,     0,
   120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     0,     0,     0,     0,     0,   129,   130,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,   115,   334,
     0,     0,     0,     0,     0,   116,     0,     0,   117,   118,
   119,     0,     0,     0,   120,   121,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
   125,   126,   127,   128,     0,     0,     0,     0,     0,   129,
   130,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,   115,   336,     0,     0,     0,     0,     0,   116,
     0,     0,   117,   118,   119,     0,     0,     0,   120,   121,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   122,   123,   124,   125,   126,   127,   128,     0,     0,
     0,     0,     0,   129,   130,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,   115,   357,     0,     0,
     0,     0,     0,   116,     0,     0,   117,   118,   119,     0,
     0,     0,   120,   121,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   122,   123,   124,   125,   126,
   127,   128,     0,     0,     0,     0,     0,   129,   130,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
   115,     0,     0,     0,   405,     0,     0,   116,     0,     0,
   117,   118,   119,     0,     0,     0,   120,   121,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
   123,   124,   125,   126,   127,   128,     0,     0,     0,     0,
     0,   129,   130,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,   115,     0,     0,     0,   406,     0,
     0,   116,     0,     0,   117,   118,   119,     0,     0,     0,
   120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
     0,     0,     0,     0,     0,   129,   130,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,   115,     0,
     0,     0,   414,     0,     0,   116,     0,     0,   117,   118,
   119,     0,     0,     0,   120,   121,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
   125,   126,   127,   128,     0,     0,     0,     0,     0,   129,
   130,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,   115,     0,     0,     0,   419,     0,     0,   116,
     0,     0,   117,   118,   119,     0,     0,     0,   120,   121,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   122,   123,   124,   125,   126,   127,   128,     0,     0,
     0,     0,     0,   129,   130,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,   115,     0,     0,     0,
   421,     0,     0,   116,     0,     0,   117,   118,   119,     0,
     0,     0,   120,   121,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   122,   123,   124,   125,   126,
   127,   128,     0,     0,     0,     0,     0,   129,   130,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
   115,     0,     0,     0,     0,     0,     0,   116,     0,     0,
   117,   118,   119,     0,     0,     0,   120,   121,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
   123,   124,   125,   126,   127,   128,     0,     0,     0,     0,
     0,   129,   130,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,   115,     0,     0,     0,     0,     0,
     0,   116,     0,     0,   117,   118,   119,     0,     0,     0,
   120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   122,   123,   124,   125,   126,   127,   128,
   105,   106,   107,   108,   109,   110,   130,   111,   112,   113,
   114,   115,     0,     0,     0,     0,     0,     0,   116,     0,
     0,   117,   118,   119,     0,     0,     0,   120,   121,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   122,   123,   124,   125,   126,     0,   128,   105,   106,   107,
   108,   109,   110,   130,   111,     0,   113,   114,   115,     0,
     0,     0,     0,     0,     0,   116,     0,     0,   117,   118,
   119,     0,     0,     0,   120,   121,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
   125,     0,     0,   128,   105,   106,   107,   108,   109,   110,
   130,   111,     0,   113,   114,   115,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   117,   118,   119,     0,     0,
     0,   120,   121,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   122,   123,   124,   125,     0,     0,
   128,   105,   106,   107,   108,   109,   110,   130,   111,     0,
     0,   114,   115,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   117,   118,   119,     0,     0,     0,   120,   121,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   122,   123,   124,   125,     0,     0,   128,   105,   106,
   107,   108,   109,   110,   130,   111,     0,     0,   114,   115,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   117,
   118,   119,     0,     0,     0,   120,   121,   105,   106,   107,
   108,     0,     0,     0,   111,     0,     0,   114,   115,    80,
   124,   125,     0,     0,   128,     0,     0,     0,   117,   118,
   119,   130,     0,     0,   120,   121,     0,    82,    83,   131,
     0,     0,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,     0,   128,   280,     0,     0,    82,    83,     0,
   130,    94,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    82,    83,     0,     0,     0,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93
};

static const short yycheck[] = {     1,
     1,    45,   208,   141,   260,   154,   219,     3,    10,   247,
    64,    81,   288,    62,    28,   115,     8,   230,    55,    62,
    60,   133,    60,    49,    50,    51,    52,    53,    54,    64,
    56,    57,    58,    59,    60,    27,    28,    29,    30,    31,
   273,    67,     4,    60,    70,    71,    72,    55,    60,    63,
    76,    77,    14,     5,     6,   104,   255,    97,    96,    43,
    97,   104,    54,    89,    90,    91,    92,    59,    62,    95,
    66,   327,   348,    60,    60,    67,   102,    62,   216,    71,
    60,    60,   295,    75,    76,   234,    78,    79,    80,    97,
   289,   297,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    62,    96,    60,    63,    66,    65,    96,
   104,    60,    60,   105,   106,   107,   108,   109,   110,   104,
   112,   113,   114,   115,   116,   117,   325,   353,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   252,   379,   212,   145,   145,   245,   246,   346,   140,   141,
   349,   384,   362,    55,    24,   147,   118,   119,    43,   151,
   398,    63,   388,    55,   374,     3,   365,     5,     6,     7,
    64,    73,    74,    43,    44,    60,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    64,   386,     5,     6,
    63,    63,    65,    65,    32,    97,   220,   221,   242,    60,
    43,    42,    40,    41,    42,    43,    60,    24,    46,    47,
    48,   410,    50,    51,    60,    14,   208,    60,   220,   221,
   352,   353,    60,    42,   216,    60,    43,    44,    42,    65,
    68,    69,   224,   225,    43,   227,   228,   229,    61,    43,
   264,   373,   374,    43,    60,    63,   238,    62,   240,   241,
    61,    23,   244,   245,   246,   247,   388,   249,    23,    97,
   392,     3,   264,    51,    52,    55,    61,    61,    56,    62,
    61,    59,    60,    60,   266,   267,   300,    60,    63,   303,
   304,    65,   306,    71,    72,   309,   310,    65,   280,    43,
    46,   104,   294,   294,    43,    62,     8,    61,   300,    56,
    26,   303,   304,    60,   306,   297,    64,   309,   310,    61,
   334,    61,   336,   337,    71,    72,   308,    61,    61,    65,
   312,   323,   323,    61,    61,    33,    34,    35,    36,    37,
    65,    65,   334,   357,   336,   337,    44,    66,    66,    33,
    34,    35,    36,    65,    65,    61,    55,    43,   350,   350,
    44,    49,    50,    51,    52,   357,    66,    64,    56,    65,
    65,    59,    60,    66,   366,   366,   368,   368,    63,    66,
    55,    64,   364,    71,    72,    64,    66,    55,    76,    77,
     0,     0,   384,   384,   214,   377,   378,   379,    49,    50,
    51,    52,   374,    29,   341,    56,    -1,    -1,    59,    60,
   402,   402,    -1,    -1,    -1,   397,   398,    -1,    -1,    -1,
    71,    72,    -1,    -1,   416,   416,    -1,    -1,    -1,    -1,
    -1,   413,    -1,    -1,    -1,     3,   418,     5,     6,     7,
    -1,     9,    -1,    11,    -1,    13,    14,    15,    -1,    -1,
    -1,    19,    20,    21,    22,    -1,    24,    25,    26,    27,
    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    40,    41,    42,    43,    -1,    45,    46,    47,
    48,    -1,    50,    51,    -1,     3,    -1,     5,     6,     7,
    -1,     9,    60,    11,    -1,    13,    14,    15,    -1,    -1,
    68,    69,    20,    21,    22,    -1,    24,    25,    -1,    27,
    -1,    29,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    40,    41,    42,    43,    -1,    45,    46,    47,
    48,    -1,    50,    51,    -1,     3,    -1,     5,     6,     7,
    -1,     9,    60,    11,    -1,    13,    14,    15,    -1,    -1,
    68,    69,    20,    21,    22,    -1,    24,    25,    -1,    27,
    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    40,    41,    42,    43,    -1,    45,    46,    47,
    48,    -1,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    60,    -1,    -1,    -1,    -1,    65,    -1,    -1,
    68,    69,     3,    -1,     5,     6,     7,    -1,     9,    -1,
    11,    -1,    13,    14,    15,    -1,    -1,    -1,    -1,    20,
    21,    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,
    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
    41,    42,    43,    -1,    45,    46,    47,    48,    -1,    50,
    51,    -1,     3,    -1,     5,     6,     7,    -1,     9,    60,
    11,    -1,    13,    14,    15,    66,    -1,    68,    69,    20,
    21,    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,
    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
    41,    42,    43,    -1,    45,    46,    47,    48,    -1,    50,
    51,    -1,     3,    -1,     5,     6,     7,    -1,     9,    60,
    11,    -1,    13,    14,    15,    66,    -1,    68,    69,    20,
    21,    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,
    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
    41,    42,    43,    -1,    45,    46,    47,    48,    -1,    50,
    51,    -1,     3,    -1,     5,     6,     7,    -1,     9,    60,
    11,    -1,    13,    14,    15,    66,    -1,    68,    69,    20,
    21,    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,
    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
    41,    42,    43,    -1,    45,    46,    47,    48,    -1,    50,
    51,    -1,     3,    -1,     5,     6,     7,    -1,     9,    60,
    11,    -1,    13,    14,    15,    66,    -1,    68,    69,    20,
    21,    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,
    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
    41,    42,    43,    -1,    45,    46,    47,    48,    -1,    50,
    51,    -1,     3,    -1,     5,     6,     7,    -1,     9,    60,
    11,    -1,    13,    14,    15,    66,    -1,    68,    69,    20,
    21,    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,
    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
    41,    42,    43,    -1,    45,    46,    47,    48,    -1,    50,
    51,    -1,     3,    -1,     5,     6,     7,    -1,     9,    60,
    11,    -1,    13,    14,    15,    66,    -1,    68,    69,    20,
    21,    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,
    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
    41,    42,    43,    -1,    45,    46,    47,    48,    -1,    50,
    51,    -1,     3,    -1,     5,     6,     7,    -1,     9,    60,
    11,    -1,    13,    14,    15,    66,    -1,    68,    69,    20,
    21,    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,
    -1,    32,     3,    -1,     5,     6,     7,    -1,    -1,    40,
    41,    42,    43,    -1,    45,    46,    47,    48,    -1,    50,
    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
    -1,    32,     3,    -1,     5,     6,     7,    68,    69,    40,
    41,    42,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
    -1,    32,     3,    64,     5,     6,     7,    68,    69,    40,
    41,    42,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
    -1,    32,     3,    64,     5,     6,     7,    68,    69,    40,
    41,    42,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60,
    -1,    32,    -1,    -1,    65,    -1,    -1,    68,    69,    40,
    41,    42,    43,    -1,    -1,    46,    47,    48,    -1,    50,
    51,     3,    -1,     5,     6,     7,    -1,    -1,    -1,    60,
    -1,    -1,    -1,    64,    -1,    -1,    -1,    68,    69,    -1,
    -1,    -1,    -1,    -1,    -1,     3,    -1,     5,     6,     7,
    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
    42,    43,    -1,    -1,    46,    47,    48,    -1,    50,    51,
    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    60,    61,
    -1,    -1,    40,    41,    42,    43,    68,    69,    46,    47,
    48,    -1,    50,    51,     3,    -1,     5,     6,     7,    -1,
    -1,    -1,    60,    -1,    -1,    -1,    64,    -1,    -1,    -1,
    68,    69,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
     5,     6,     7,    32,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    40,    41,    42,    43,    -1,    -1,    46,    47,    48,
    -1,    50,    51,    -1,    -1,    -1,    -1,    32,    -1,    -1,
    -1,    60,    61,    -1,    -1,    40,    41,    42,    43,    68,
    69,    46,    47,    48,    -1,    50,    51,     3,    -1,     5,
     6,     7,    -1,    -1,    -1,    60,    61,    -1,    -1,    -1,
    -1,    -1,    -1,    68,    69,    -1,    -1,    -1,    -1,    -1,
    -1,     3,    -1,     5,     6,     7,    32,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    40,    41,    42,    43,    -1,    -1,
    46,    47,    48,    -1,    50,    51,    -1,    -1,    -1,    -1,
    32,    -1,    -1,    -1,    60,    61,    -1,    -1,    40,    41,
    42,    43,    68,    69,    46,    47,    48,    -1,    50,    51,
     3,    -1,     5,     6,     7,    -1,    -1,    -1,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    42,
    43,    -1,    -1,    46,    47,    48,    -1,    50,    51,    -1,
    -1,    49,    50,    51,    52,    53,    54,    60,    56,    57,
    58,    59,    60,    61,    62,    68,    69,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    60,    -1,    62,    -1,
    64,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    64,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    60,    61,    -1,    -1,    -1,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    64,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    60,    -1,    -1,    63,    -1,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    64,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    60,    -1,    -1,    63,    -1,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    64,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    60,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    64,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    60,    61,    -1,    -1,    -1,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    64,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    64,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    -1,    -1,    -1,    -1,    -1,   101,   102,    49,    50,    51,
    52,    53,    54,    -1,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    64,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    93,    94,    95,    -1,    -1,    -1,    -1,    -1,   101,
   102,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    64,    -1,    -1,    67,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    93,    94,    95,    -1,    -1,
    -1,    -1,    -1,   101,   102,    49,    50,    51,    52,    53,
    54,    -1,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    64,    -1,    -1,    67,    -1,    -1,    70,    71,    72,    -1,
    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    89,    90,    91,    92,    93,
    94,    95,    -1,    -1,    -1,    -1,    -1,   101,   102,    49,
    50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,
    90,    91,    92,    93,    94,    95,    -1,    -1,    -1,    -1,
    -1,   101,   102,    49,    50,    51,    52,    53,    54,    -1,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
    -1,    67,    -1,    -1,    70,    71,    72,    -1,    -1,    -1,
    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    89,    90,    91,    92,    93,    94,    95,
    49,    50,    51,    52,    53,    54,   102,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    89,    90,    91,    92,    93,    -1,    95,    49,    50,    51,
    52,    53,    54,   102,    56,    -1,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    71,
    72,    -1,    -1,    -1,    76,    77,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    89,    90,    91,
    92,    -1,    -1,    95,    49,    50,    51,    52,    53,    54,
   102,    56,    -1,    58,    59,    60,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    71,    72,    -1,    -1,
    -1,    76,    77,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    89,    90,    91,    92,    -1,    -1,
    95,    49,    50,    51,    52,    53,    54,   102,    56,    -1,
    -1,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    71,    72,    -1,    -1,    -1,    76,    77,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    89,    90,    91,    92,    -1,    -1,    95,    49,    50,
    51,    52,    53,    54,   102,    56,    -1,    -1,    59,    60,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    71,    72,    -1,    -1,    -1,    76,    77,    49,    50,    51,
    52,    -1,    -1,    -1,    56,    -1,    -1,    59,    60,    55,
    91,    92,    -1,    -1,    95,    -1,    -1,    -1,    70,    71,
    72,   102,    -1,    -1,    76,    77,    -1,    73,    74,    55,
    -1,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    -1,    95,    55,    -1,    -1,    73,    74,    -1,
   102,    97,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    73,    74,    -1,    -1,    -1,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 170 "cmdgram.y"
{ ;
    break;}
case 2:
#line 175 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 3:
#line 177 "cmdgram.y"
{ if(!gStatementList) { gStatementList = yyvsp[0].stmt; } else { gStatementList->append(yyvsp[0].stmt); } ;
    break;}
case 4:
#line 182 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 5:
#line 184 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 6:
#line 186 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 7:
#line 191 "cmdgram.y"
{ yyval.stmt = yyvsp[-2].stmt; for(StmtNode *walk = (yyvsp[-2].stmt);walk;walk = walk->getNext() ) walk->setPackage(yyvsp[-4].s.value); ;
    break;}
case 8:
#line 196 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 9:
#line 198 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; (yyvsp[-1].stmt)->append(yyvsp[0].stmt);  ;
    break;}
case 10:
#line 203 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 11:
#line 205 "cmdgram.y"
{ if(!yyvsp[-1].stmt) { yyval.stmt = yyvsp[0].stmt; } else { (yyvsp[-1].stmt)->append(yyvsp[0].stmt); yyval.stmt = yyvsp[-1].stmt; } ;
    break;}
case 18:
#line 216 "cmdgram.y"
{ yyval.stmt = BreakStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 19:
#line 218 "cmdgram.y"
{ yyval.stmt = ContinueStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 20:
#line 220 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-1].i.lineNumber, NULL ); ;
    break;}
case 21:
#line 222 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-2].i.lineNumber, yyvsp[-1].expr ); ;
    break;}
case 22:
#line 224 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 23:
#line 226 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr, NULL ); ;
    break;}
case 24:
#line 228 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[-1].expr ); ;
    break;}
case 25:
#line 230 "cmdgram.y"
{ yyval.stmt = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false, true ); ;
    break;}
case 26:
#line 235 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-7].i.lineNumber, yyvsp[-6].s.value, NULL, yyvsp[-4].param, yyvsp[-1].stmt, StringTable->insert("string") ); ;
    break;}
case 27:
#line 237 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].s.value, NULL, yyvsp[-6].param, yyvsp[-1].stmt, yyvsp[-3].ste ); ;
    break;}
case 28:
#line 239 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-6].s.value, yyvsp[-8].s.value, yyvsp[-4].param, yyvsp[-1].stmt, StringTable->insert("string") ); ;
    break;}
case 29:
#line 241 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-11].i.lineNumber, yyvsp[-8].s.value, yyvsp[-10].s.value, yyvsp[-6].param, yyvsp[-1].stmt, yyvsp[-3].ste ); ;
    break;}
case 30:
#line 246 "cmdgram.y"
{ yyval.param = NULL; ;
    break;}
case 31:
#line 248 "cmdgram.y"
{ yyval.param = yyvsp[0].param; ;
    break;}
case 32:
#line 253 "cmdgram.y"
{ yyval.param = yyvsp[0].param; ;
    break;}
case 33:
#line 255 "cmdgram.y"
{ yyval.param = yyvsp[-2].param; ((StmtNode*)(yyvsp[-2].param))->append(yyvsp[0].param); ;
    break;}
case 34:
#line 260 "cmdgram.y"
{ yyval.param = ParamNode::alloc( yyvsp[-2].s.lineNumber, yyvsp[-2].s.value, yyvsp[0].ste ); ;
    break;}
case 35:
#line 262 "cmdgram.y"
{ yyval.param = ParamNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, StringTable->insert("string") ); ;
    break;}
case 36:
#line 267 "cmdgram.y"
{ yyval.stmt = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, NULL, yyvsp[-5].s.value, yyvsp[-2].slist, NULL, true, false, false); ;
    break;}
case 37:
#line 272 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, false); ;
    break;}
case 38:
#line 274 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, false); ;
    break;}
case 39:
#line 276 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-11].i.lineNumber, yyvsp[-10].expr, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, true, false); ;
    break;}
case 40:
#line 278 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-8].i.lineNumber, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, true, false); ;
    break;}
case 41:
#line 280 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, true); ;
    break;}
case 42:
#line 282 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, true); ;
    break;}
case 43:
#line 287 "cmdgram.y"
{ yyval.s.value = NULL; ;
    break;}
case 44:
#line 289 "cmdgram.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 45:
#line 294 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( CodeBlock::smCurrentParser->getCurrentLine(), "", false); ;
    break;}
case 46:
#line 296 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 47:
#line 301 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 48:
#line 303 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 49:
#line 308 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = NULL; ;
    break;}
case 50:
#line 310 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[0].slist; yyval.odcl.decls = NULL; ;
    break;}
case 51:
#line 312 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 52:
#line 314 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[-1].slist; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 53:
#line 319 "cmdgram.y"
{ yyval.od = yyvsp[-1].od; ;
    break;}
case 54:
#line 321 "cmdgram.y"
{ yyvsp[-2].od->append(yyvsp[-1].od); yyval.od = yyvsp[-2].od; ;
    break;}
case 55:
#line 326 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 56:
#line 328 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 57:
#line 333 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, false); ;
    break;}
case 58:
#line 335 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, true); ;
    break;}
case 59:
#line 340 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 60:
#line 342 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].stmt, yyvsp[0].stmt, false); ;
    break;}
case 61:
#line 344 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-4].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].stmt, yyvsp[0].ifnode, true); ;
    break;}
case 62:
#line 349 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr;;
    break;}
case 63:
#line 351 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr=yyvsp[-2].expr; ;
    break;}
case 64:
#line 356 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-4].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 65:
#line 358 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, yyvsp[-2].stmt, yyvsp[0].stmt, false); ;
    break;}
case 66:
#line 363 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-4].i.lineNumber, nil, yyvsp[-2].expr, nil, yyvsp[0].stmt, false); ;
    break;}
case 67:
#line 365 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-3].i.lineNumber, nil, yyvsp[-1].expr, nil, yyvsp[-4].stmt, true); ;
    break;}
case 68:
#line 370 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-8].i.lineNumber, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 69:
#line 372 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 70:
#line 374 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 71:
#line 376 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 72:
#line 378 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 73:
#line 380 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 74:
#line 382 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 75:
#line 384 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-5].i.lineNumber, NULL, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 76:
#line 389 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, false ); ;
    break;}
case 77:
#line 391 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, true ); ;
    break;}
case 78:
#line 396 "cmdgram.y"
{ yyval.stmt = yyvsp[0].expr; ;
    break;}
case 79:
#line 398 "cmdgram.y"
{ yyval.stmt = yyvsp[0].aen; ;
    break;}
case 80:
#line 403 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 81:
#line 405 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 82:
#line 407 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 83:
#line 409 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 84:
#line 411 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 85:
#line 413 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 86:
#line 415 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 87:
#line 417 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 88:
#line 419 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 89:
#line 421 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 90:
#line 423 "cmdgram.y"
{ yyval.expr = FloatUnaryExprNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 91:
#line 425 "cmdgram.y"
{ yyval.expr = TTagDerefNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[0].expr ); ;
    break;}
case 92:
#line 427 "cmdgram.y"
{ yyval.expr = TTagExprNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 93:
#line 429 "cmdgram.y"
{ yyval.expr = ConditionalExprNode::alloc( yyvsp[-4].expr->dbgLineNumber, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 94:
#line 431 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 95:
#line 433 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 96:
#line 435 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 97:
#line 437 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 98:
#line 439 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 99:
#line 441 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 100:
#line 443 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 101:
#line 445 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 102:
#line 447 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 103:
#line 449 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 104:
#line 451 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, true); ;
    break;}
case 105:
#line 453 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, false); ;
    break;}
case 106:
#line 455 "cmdgram.y"
{ yyval.expr = StrcatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].i.value); ;
    break;}
case 107:
#line 457 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 108:
#line 459 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 109:
#line 461 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, true); ;
    break;}
case 110:
#line 463 "cmdgram.y"
{ yyval.expr = FloatNode::alloc( yyvsp[0].f.lineNumber, yyvsp[0].f.value ); ;
    break;}
case 111:
#line 465 "cmdgram.y"
{ yyval.expr = IntNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value ); ;
    break;}
case 112:
#line 467 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].i.lineNumber, StringTable->insert("break")); ;
    break;}
case 113:
#line 469 "cmdgram.y"
{ yyval.expr = SlotAccessNode::alloc( yyvsp[0].slot.lineNumber, yyvsp[0].slot.object, yyvsp[0].slot.array, yyvsp[0].slot.slotName ); ;
    break;}
case 114:
#line 471 "cmdgram.y"
{ yyval.expr = InternalSlotAccessNode::alloc( yyvsp[0].intslot.lineNumber, yyvsp[0].intslot.object, yyvsp[0].intslot.slotExpr, yyvsp[0].intslot.recurse); ;
    break;}
case 115:
#line 473 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 116:
#line 475 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false); ;
    break;}
case 117:
#line 477 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL); ;
    break;}
case 118:
#line 479 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr ); ;
    break;}
case 119:
#line 481 "cmdgram.y"
{
         const U32 bufLen = 64;
         UTF8 buffer[bufLen];
         dSprintf(buffer, bufLen, "__anonymous_function%d", gAnonFunctionID++);
         StringTableEntry fName = StringTable->insert(buffer);
         StmtNode *fndef = FunctionDeclStmtNode::alloc(yyvsp[-6].i.lineNumber, fName, NULL, yyvsp[-4].param, yyvsp[-1].stmt, StringTable->insert("string"));

         if(!gAnonFunctionList)
            gAnonFunctionList = fndef;
         else
            gAnonFunctionList->append(fndef);

         yyval.expr = StrConstNode::alloc( yyvsp[-6].i.lineNumber, (UTF8*)fName, false );
      ;
    break;}
case 120:
#line 496 "cmdgram.y"
{
         const U32 bufLen = 64;
         UTF8 buffer[bufLen];
         dSprintf(buffer, bufLen, "__anonymous_function%d", gAnonFunctionID++);
         StringTableEntry fName = StringTable->insert(buffer);
         StmtNode *fndef = FunctionDeclStmtNode::alloc(yyvsp[-8].i.lineNumber, fName, NULL, yyvsp[-6].param, yyvsp[-1].stmt, yyvsp[-3].ste);

         if(!gAnonFunctionList)
            gAnonFunctionList = fndef;
         else
            gAnonFunctionList->append(fndef);

         yyval.expr = StrConstNode::alloc( yyvsp[-8].i.lineNumber, (UTF8*)fName, false );
      ;
    break;}
case 121:
#line 514 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.slot.object = yyvsp[-2].expr; yyval.slot.slotName = yyvsp[0].s.value; yyval.slot.array = NULL; ;
    break;}
case 122:
#line 516 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-5].expr->dbgLineNumber; yyval.slot.object = yyvsp[-5].expr; yyval.slot.slotName = yyvsp[-3].s.value; yyval.slot.array = yyvsp[-1].expr; ;
    break;}
case 123:
#line 521 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = false; ;
    break;}
case 124:
#line 523 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = true; ;
    break;}
case 125:
#line 528 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 126:
#line 530 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 127:
#line 535 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = opPLUSPLUS; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 128:
#line 537 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = opMINUSMINUS; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 129:
#line 539 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '+'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 130:
#line 541 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '-'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 131:
#line 543 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '*'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 132:
#line 545 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '/'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 133:
#line 547 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '%'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 134:
#line 549 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '&'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 135:
#line 551 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '^'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 136:
#line 553 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '|'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 137:
#line 555 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHL; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 138:
#line 557 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHR; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 139:
#line 562 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 140:
#line 564 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 141:
#line 566 "cmdgram.y"
{ yyval.expr = yyvsp[0].od; ;
    break;}
case 142:
#line 568 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-2].s.lineNumber, yyvsp[-2].s.value, NULL, yyvsp[0].expr, NULL); ;
    break;}
case 143:
#line 570 "cmdgram.y"
{
         // this might cause some issues... 
         yyval.expr = yyvsp[-1].aen; 
      ;
    break;}
case 144:
#line 575 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[0].expr, NULL); ;
    break;}
case 145:
#line 577 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-1].s.lineNumber, yyvsp[-1].s.value, NULL, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 146:
#line 579 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-4].s.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 147:
#line 581 "cmdgram.y"
{ yyval.expr = SlotAssignOpNode::alloc( yyvsp[-1].slot.lineNumber, yyvsp[-1].slot.object, yyvsp[-1].slot.slotName, yyvsp[-1].slot.array, yyvsp[0].asn.token, yyvsp[0].asn.expr); ;
    break;}
case 148:
#line 583 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-2].slot.lineNumber, yyvsp[-2].slot.object, yyvsp[-2].slot.array, yyvsp[-2].slot.slotName, yyvsp[0].expr); ;
    break;}
case 149:
#line 585 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-4].slot.lineNumber, yyvsp[-4].slot.object, yyvsp[-4].slot.array, yyvsp[-4].slot.slotName, yyvsp[-1].expr); ;
    break;}
case 150:
#line 590 "cmdgram.y"
{ yyval.aen = AssignExprNode::alloc( yyvsp[-4].s.lineNumber, yyvsp[-4].s.value, NULL, yyvsp[0].expr, yyvsp[-2].ste); ;
    break;}
case 151:
#line 595 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, NULL, yyvsp[-1].expr, false); ;
    break;}
case 152:
#line 597 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-3].s.value, yyvsp[-5].s.value, yyvsp[-1].expr, false); ;
    break;}
case 153:
#line 599 "cmdgram.y"
{ yyvsp[-5].expr->append(yyvsp[-1].expr); yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].expr->dbgLineNumber, yyvsp[-3].s.value, NULL, yyvsp[-5].expr, true); ;
    break;}
case 154:
#line 601 "cmdgram.y"
{ yyval.expr = FuncPointerCallExprNode::alloc( yyvsp[-3].expr->dbgLineNumber, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 155:
#line 606 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-1].expr, NULL ); ;
    break;}
case 156:
#line 608 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-5].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].str.value ); ;
    break;}
case 157:
#line 613 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 158:
#line 615 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 159:
#line 620 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 160:
#line 622 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 161:
#line 627 "cmdgram.y"
{ yyval.slist = NULL; ;
    break;}
case 162:
#line 629 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 163:
#line 634 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 164:
#line 636 "cmdgram.y"
{ yyvsp[-1].slist->append(yyvsp[0].slist); yyval.slist = yyvsp[-1].slist; ;
    break;}
case 165:
#line 641 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].s.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr); ;
    break;}
case 166:
#line 643 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-4].i.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr, yyvsp[-4].i.value); ;
    break;}
case 167:
#line 645 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].i.lineNumber, NULL, NULL, StringTable->insert("datablock"), yyvsp[-1].expr); ;
    break;}
case 168:
#line 647 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-6].s.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-6].s.value, yyvsp[-1].expr); ;
    break;}
case 169:
#line 649 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-6].s.value, yyvsp[-1].expr, yyvsp[-7].i.value); ;
    break;}
case 170:
#line 654 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 171:
#line 656 "cmdgram.y"
{ yyval.expr = CommaCatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 172:
#line 661 "cmdgram.y"
{ yyval.ste = StringTable->insert("int"); ;
    break;}
case 173:
#line 663 "cmdgram.y"
{ yyval.ste = StringTable->insert("float"); ;
    break;}
case 174:
#line 665 "cmdgram.y"
{ yyval.ste = StringTable->insert("bool"); ;
    break;}
case 175:
#line 667 "cmdgram.y"
{ yyval.ste = StringTable->insert("string"); ;
    break;}
case 176:
#line 669 "cmdgram.y"
{ 
         // These are Console Types. Note that user defined types here are not supported.
         StringTableEntry _type = ConsoleBaseType::getType(yyvsp[0].i.value)->getTypeName();
         yyval.ste = StringTable->insert(_type); 
      ;
    break;}
case 177:
#line 678 "cmdgram.y"
{ yyval.ste = yyvsp[0].ste; ;
    break;}
case 178:
#line 680 "cmdgram.y"
{ yyval.ste = StringTable->insert("void"); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 681 "cmdgram.y"


