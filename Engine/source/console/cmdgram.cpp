
/*  A Bison parser, made from cmdgram.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse CMDparse
#define yylex CMDlex
#define yyerror CMDerror
#define yylval CMDlval
#define yychar CMDchar
#define yydebug CMDdebug
#define yynerrs CMDnerrs
#define	rwDEFINE	258
#define	rwENDDEF	259
#define	rwDECLARE	260
#define	rwDECLARESINGLETON	261
#define	rwBREAK	262
#define	rwELSE	263
#define	rwCONTINUE	264
#define	rwGLOBAL	265
#define	rwIF	266
#define	rwNIL	267
#define	rwRETURN	268
#define	rwWHILE	269
#define	rwDO	270
#define	rwENDIF	271
#define	rwENDWHILE	272
#define	rwENDFOR	273
#define	rwDEFAULT	274
#define	rwFOR	275
#define	rwFOREACH	276
#define	rwFOREACHSTR	277
#define	rwIN	278
#define	rwDATABLOCK	279
#define	rwSWITCH	280
#define	rwCASE	281
#define	rwSWITCHSTR	282
#define	rwCASEOR	283
#define	rwPACKAGE	284
#define	rwNAMESPACE	285
#define	rwCLASS	286
#define	rwASSERT	287
#define	ILLEGAL_TOKEN	288
#define	CHRCONST	289
#define	INTCONST	290
#define	TTAG	291
#define	VAR	292
#define	IDENT	293
#define	TYPEIDENT	294
#define	DOCBLOCK	295
#define	STRATOM	296
#define	TAGATOM	297
#define	FLTCONST	298
#define	opINTNAME	299
#define	opINTNAMER	300
#define	opMINUSMINUS	301
#define	opPLUSPLUS	302
#define	STMT_SEP	303
#define	opSHL	304
#define	opSHR	305
#define	opPLASN	306
#define	opMIASN	307
#define	opMLASN	308
#define	opDVASN	309
#define	opMODASN	310
#define	opANDASN	311
#define	opXORASN	312
#define	opORASN	313
#define	opSLASN	314
#define	opSRASN	315
#define	opCAT	316
#define	opEQ	317
#define	opNE	318
#define	opGE	319
#define	opLE	320
#define	opAND	321
#define	opOR	322
#define	opSTREQ	323
#define	opCOLONCOLON	324
#define	opMDASN	325
#define	opNDASN	326
#define	opNTASN	327
#define	opSTRNE	328
#define	UNARY	329

#line 1 "cmdgram.y"


// bison --defines=cmdgram.h --verbose -o cmdgram.cpp -p CMD CMDgram.y

// Make sure we don't get gram.h twice.
#define _CMDGRAM_H_

#include <stdlib.h>
#include <stdio.h>
#include "console/console.h"
#include "console/compiler.h"
#include "console/consoleInternal.h"
#include "core/strings/stringFunctions.h"

#ifndef YYDEBUG
#define YYDEBUG 0
#endif

#define YYSSIZE 350

int outtext(char *fmt, ...);
extern int serrors;

#define nil 0
#undef YY_ARGS
#define YY_ARGS(x)   x

int CMDlex();
void CMDerror(char *, ...);

#ifdef alloca
#undef alloca
#endif
#define alloca dMalloc

template< typename T >
struct Token
{
   T value;
   U32 lineNumber;
};

#line 44 "cmdgram.y"

        /* Reserved Word Definitions */
#line 55 "cmdgram.y"

        /* Constants and Identifier Definitions */
#line 69 "cmdgram.y"

        /* Operator Definitions */

#line 82 "cmdgram.y"
typedef union {
   Token< char >           c;
   Token< int >            i;
   Token< const char* >    s;
   Token< char* >          str;
   Token< double >         f;
   StmtNode*               stmt;
   ExprNode*               expr;
   SlotAssignNode*         slist;
   VarNode*                var;
   SlotDecl                slot;
   InternalSlotDecl        intslot;
   ObjectBlockDecl         odcl;
   ObjectDeclNode*         od;
   AssignDecl              asn;
   IfStmtNode*             ifnode;
   ParamNode*              param;
   ArrayLiteralNode*       aln;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		381
#define	YYFLAG		-32768
#define	YYNTBASE	100

#define YYTRANSLATE(x) ((unsigned)(x) <= 329 ? yytranslate[x] : 142)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    64,     2,     2,     2,    54,    53,     2,    55,
    56,    46,    44,    57,    45,    51,    47,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    58,    59,    48,
    50,    49,    96,    65,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    92,     2,    99,    62,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    60,    52,    61,    63,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    93,    94,    95,    97,    98
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     8,    10,    12,    19,    21,    24,
    25,    28,    30,    32,    34,    36,    38,    40,    43,    46,
    49,    53,    56,    61,    68,    70,    79,    90,    91,    93,
    95,    99,   101,   112,   123,   131,   144,   154,   165,   173,
   174,   177,   178,   180,   181,   184,   185,   187,   189,   192,
   195,   199,   203,   205,   213,   221,   226,   234,   240,   242,
   246,   252,   260,   266,   273,   283,   292,   301,   309,   318,
   326,   334,   341,   349,   357,   359,   361,   365,   369,   373,
   377,   381,   385,   389,   393,   397,   400,   403,   405,   411,
   415,   419,   423,   427,   431,   435,   439,   443,   447,   451,
   455,   459,   463,   466,   469,   471,   473,   475,   477,   479,
   481,   483,   485,   487,   490,   492,   496,   501,   505,   509,
   514,   518,   522,   524,   528,   530,   532,   535,   538,   541,
   544,   547,   550,   553,   556,   559,   562,   564,   566,   568,
   572,   577,   580,   584,   587,   591,   597,   602,   609,   616,
   621,   628,   629,   631,   633,   637,   638,   640,   642,   645,
   650,   656,   661,   667
};

static const short yyrhs[] = {   101,
     0,     0,   101,   102,     0,   106,     0,   107,     0,   103,
     0,    29,    38,    60,   104,    61,    59,     0,   107,     0,
   104,   107,     0,     0,   105,   106,     0,   122,     0,   123,
     0,   124,     0,   125,     0,   111,     0,   119,     0,     7,
    59,     0,     9,    59,     0,    13,    59,     0,    13,   127,
    59,     0,   126,    59,     0,    36,    50,   127,    59,     0,
    36,    50,   127,    57,   127,    59,     0,    40,     0,     3,
    38,    55,   108,    56,    60,   105,    61,     0,     3,    38,
    91,    38,    55,   108,    56,    60,   105,    61,     0,     0,
   109,     0,   110,     0,   109,    57,   110,     0,    37,     0,
    24,   132,    55,   127,   113,    56,    60,   139,    61,    59,
     0,     5,   132,    55,   114,   113,   115,    56,    60,   116,
    61,     0,     5,   132,    55,   114,   113,   115,    56,     0,
     5,   132,    55,    92,   114,    99,   113,   115,    56,    60,
   116,    61,     0,     5,   132,    55,    92,   114,    99,   113,
   115,    56,     0,     6,   132,    55,   114,   113,   115,    56,
    60,   116,    61,     0,     6,   132,    55,   114,   113,   115,
    56,     0,     0,    58,    38,     0,     0,   127,     0,     0,
    57,   138,     0,     0,   140,     0,   117,     0,   140,   117,
     0,   112,    59,     0,   117,   112,    59,     0,    60,   105,
    61,     0,   106,     0,    25,    55,   127,    56,    60,   120,
    61,     0,    27,    55,   127,    56,    60,   120,    61,     0,
    26,   121,    58,   105,     0,    26,   121,    58,   105,    19,
    58,   105,     0,    26,   121,    58,   105,   120,     0,   127,
     0,   121,    28,   127,     0,    11,    55,   127,    56,   118,
     0,    11,    55,   127,    56,   118,     8,   118,     0,    14,
    55,   127,    56,   118,     0,    15,   118,    14,    55,   127,
    56,     0,    20,    55,   127,    59,   127,    59,   127,    56,
   118,     0,    20,    55,   127,    59,   127,    59,    56,   118,
     0,    20,    55,   127,    59,    59,   127,    56,   118,     0,
    20,    55,   127,    59,    59,    56,   118,     0,    20,    55,
    59,   127,    59,   127,    56,   118,     0,    20,    55,    59,
   127,    59,    56,   118,     0,    20,    55,    59,    59,   127,
    56,   118,     0,    20,    55,    59,    59,    56,   118,     0,
    21,    55,    37,    23,   127,    56,   118,     0,    22,    55,
    37,    23,   127,    56,   118,     0,   134,     0,   134,     0,
    55,   127,    56,     0,   127,    62,   127,     0,   127,    54,
   127,     0,   127,    53,   127,     0,   127,    52,   127,     0,
   127,    44,   127,     0,   127,    45,   127,     0,   127,    46,
   127,     0,   127,    47,   127,     0,    45,   127,     0,    46,
   127,     0,    36,     0,   127,    96,   127,    58,   127,     0,
   127,    48,   127,     0,   127,    49,   127,     0,   127,    86,
   127,     0,   127,    87,   127,     0,   127,    84,   127,     0,
   127,    85,   127,     0,   127,    89,   127,     0,   127,    71,
   127,     0,   127,    72,   127,     0,   127,    88,   127,     0,
   127,    90,   127,     0,   127,    97,   127,     0,   127,    65,
   127,     0,    64,   127,     0,    63,   127,     0,    42,     0,
    43,     0,    35,     0,     7,     0,   130,     0,   131,     0,
    38,     0,    41,     0,    37,     0,    37,   128,     0,   129,
     0,    92,   127,    99,     0,   128,    92,   127,    99,     0,
    92,   137,    99,     0,   127,    51,    38,     0,   127,    51,
    38,   128,     0,   127,    66,   132,     0,   127,    67,   132,
     0,    38,     0,    55,   127,    56,     0,    69,     0,    68,
     0,    73,   127,     0,    74,   127,     0,    75,   127,     0,
    76,   127,     0,    77,   127,     0,    78,   127,     0,    79,
   127,     0,    80,   127,     0,    81,   127,     0,    82,   127,
     0,   135,     0,   136,     0,   112,     0,    37,    50,   127,
     0,    37,   128,    50,   127,     0,    37,   133,     0,    37,
   128,   133,     0,   130,   133,     0,   130,    50,   127,     0,
   130,    50,    60,   138,    61,     0,    38,    55,   137,    56,
     0,    38,    91,    38,    55,   137,    56,     0,   127,    51,
    38,    55,   137,    56,     0,    32,    55,   127,    56,     0,
    32,    55,   127,    57,    41,    56,     0,     0,   138,     0,
   127,     0,   138,    57,   127,     0,     0,   140,     0,   141,
     0,   140,   141,     0,    38,    50,   127,    59,     0,    39,
    38,    50,   127,    59,     0,    24,    50,   127,    59,     0,
    38,   128,    50,   127,    59,     0,    39,    38,   128,    50,
   127,    59,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   165,   170,   172,   177,   179,   181,   186,   191,   193,   198,
   200,   205,   206,   207,   208,   209,   210,   211,   213,   215,
   217,   219,   221,   223,   225,   230,   232,   237,   239,   244,
   246,   251,   256,   261,   263,   265,   267,   269,   271,   276,
   278,   283,   285,   290,   292,   297,   299,   301,   303,   308,
   310,   315,   317,   322,   324,   329,   331,   333,   338,   340,
   345,   347,   352,   354,   359,   361,   363,   365,   367,   369,
   371,   373,   378,   380,   385,   390,   392,   394,   396,   398,
   400,   402,   404,   406,   408,   410,   412,   414,   416,   418,
   420,   422,   424,   426,   428,   430,   432,   434,   436,   438,
   440,   442,   444,   446,   448,   450,   452,   454,   456,   458,
   460,   462,   464,   466,   468,   490,   492,   497,   502,   504,
   509,   511,   516,   518,   523,   525,   527,   529,   531,   533,
   535,   537,   539,   541,   543,   545,   550,   552,   554,   556,
   558,   560,   562,   564,   566,   568,   573,   575,   577,   587,
   589,   594,   596,   601,   603,   608,   610,   615,   617,   622,
   624,   626,   628,   630
};

static const char * const yytname[] = {   "$","error","$undefined.","rwDEFINE",
"rwENDDEF","rwDECLARE","rwDECLARESINGLETON","rwBREAK","rwELSE","rwCONTINUE",
"rwGLOBAL","rwIF","rwNIL","rwRETURN","rwWHILE","rwDO","rwENDIF","rwENDWHILE",
"rwENDFOR","rwDEFAULT","rwFOR","rwFOREACH","rwFOREACHSTR","rwIN","rwDATABLOCK",
"rwSWITCH","rwCASE","rwSWITCHSTR","rwCASEOR","rwPACKAGE","rwNAMESPACE","rwCLASS",
"rwASSERT","ILLEGAL_TOKEN","CHRCONST","INTCONST","TTAG","VAR","IDENT","TYPEIDENT",
"DOCBLOCK","STRATOM","TAGATOM","FLTCONST","'+'","'-'","'*'","'/'","'<'","'>'",
"'='","'.'","'|'","'&'","'%'","'('","')'","','","':'","';'","'{'","'}'","'^'",
"'~'","'!'","'@'","opINTNAME","opINTNAMER","opMINUSMINUS","opPLUSPLUS","STMT_SEP",
"opSHL","opSHR","opPLASN","opMIASN","opMLASN","opDVASN","opMODASN","opANDASN",
"opXORASN","opORASN","opSLASN","opSRASN","opCAT","opEQ","opNE","opGE","opLE",
"opAND","opOR","opSTREQ","opCOLONCOLON","'['","opMDASN","opNDASN","opNTASN",
"'?'","opSTRNE","UNARY","']'","start","decl_list","decl","package_decl","fn_decl_list",
"statement_list","stmt","fn_decl_stmt","var_list_decl","var_list","var_param",
"datablock_decl","object_decl","parent_block","object_name","object_args","object_declare_block",
"object_decl_list","stmt_block","switch_stmt","case_block","case_expr","if_stmt",
"while_stmt","for_stmt","foreach_stmt","expression_stmt","expr","array_expr",
"array_literal","slot_acc","intslot_acc","class_name_expr","assign_op_struct",
"stmt_expr","funcall_expr","assert_expr","expr_list_decl","expr_list","slot_assign_list_opt",
"slot_assign_list","slot_assign",""
};
#endif

static const short yyr1[] = {     0,
   100,   101,   101,   102,   102,   102,   103,   104,   104,   105,
   105,   106,   106,   106,   106,   106,   106,   106,   106,   106,
   106,   106,   106,   106,   106,   107,   107,   108,   108,   109,
   109,   110,   111,   112,   112,   112,   112,   112,   112,   113,
   113,   114,   114,   115,   115,   116,   116,   116,   116,   117,
   117,   118,   118,   119,   119,   120,   120,   120,   121,   121,
   122,   122,   123,   123,   124,   124,   124,   124,   124,   124,
   124,   124,   125,   125,   126,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   128,   128,   129,   130,   130,
   131,   131,   132,   132,   133,   133,   133,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   135,   135,   135,   136,
   136,   137,   137,   138,   138,   139,   139,   140,   140,   141,
   141,   141,   141,   141
};

static const short yyr2[] = {     0,
     1,     0,     2,     1,     1,     1,     6,     1,     2,     0,
     2,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     3,     2,     4,     6,     1,     8,    10,     0,     1,     1,
     3,     1,    10,    10,     7,    12,     9,    10,     7,     0,
     2,     0,     1,     0,     2,     0,     1,     1,     2,     2,
     3,     3,     1,     7,     7,     4,     7,     5,     1,     3,
     5,     7,     5,     6,     9,     8,     8,     7,     8,     7,
     7,     6,     7,     7,     1,     1,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     2,     2,     1,     5,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     2,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     1,     3,     4,     3,     3,     4,
     3,     3,     1,     3,     1,     1,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     1,     1,     1,     3,
     4,     2,     3,     2,     3,     5,     4,     6,     6,     4,
     6,     0,     1,     1,     3,     0,     1,     1,     2,     4,
     5,     4,     5,     6
};

static const short yydefact[] = {     2,
     1,     0,     0,     0,   108,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   107,    88,
   113,   111,    25,   112,   105,   106,     0,     0,     0,     0,
     0,   152,     3,     6,     4,     5,    16,   139,    17,    12,
    13,    14,    15,     0,     0,   115,   109,   110,    76,   137,
   138,     0,   123,     0,     0,     0,    18,    19,     0,   108,
    88,    20,     0,    76,     0,    10,    53,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   126,   125,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   114,   142,   152,     0,    86,    87,     0,   104,   103,
   154,     0,   153,    22,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   144,    28,     0,     0,    42,    42,     0,    21,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   140,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,     0,     0,     0,   143,     0,     0,    77,   118,
     0,    82,    83,    84,    85,    90,    91,   119,    81,    80,
    79,    78,   102,   121,   122,    97,    98,    94,    95,    92,
    93,    99,    96,   100,     0,   101,     0,   145,    32,     0,
    29,    30,     0,   124,    42,    40,    43,    40,     0,     0,
    52,    11,     0,     0,     0,     0,     0,     0,    40,     0,
     0,     0,     8,   150,     0,     0,    23,   116,   141,     0,
   147,   152,   155,   152,   120,     0,     0,     0,     0,    28,
     0,    43,     0,    44,    44,    61,    63,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     9,
     0,     0,   117,     0,     0,    89,   146,    10,    31,     0,
    40,    41,     0,     0,     0,     0,    64,    72,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     7,   151,    24,   148,   149,     0,     0,    44,    45,    35,
    39,    62,    71,    70,     0,    68,     0,     0,     0,    73,
    74,   156,     0,    59,    54,    55,    26,    10,     0,    46,
    46,    69,    67,    66,     0,     0,     0,     0,     0,   157,
   158,     0,    10,     0,    37,     0,     0,    48,    47,     0,
    65,     0,     0,     0,     0,     0,   159,    60,    56,    27,
    46,    50,    34,     0,    49,    38,     0,     0,     0,     0,
     0,    33,     0,    58,     0,    51,   162,   160,     0,     0,
     0,    10,    36,   163,   161,     0,    57,   164,     0,     0,
     0
};

static const short yydefgoto[] = {   379,
     1,    33,    34,   222,   140,    67,    36,   200,   201,   202,
    37,    38,   244,   206,   274,   337,   338,    68,    39,   289,
   313,    40,    41,    42,    43,    44,    45,    92,    46,    47,
    48,    55,    93,    64,    50,    51,   102,   103,   329,   339,
   331
};

static const short yypact[] = {-32768,
   359,   -13,   -15,   -15,   -17,   -14,    37,    23,    38,   492,
    39,    40,    41,   -15,    43,    44,     8,    46,-32768,    -2,
  2935,   -28,-32768,-32768,-32768,-32768,  1006,  1006,  1006,  1006,
  1006,  1006,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    -5,  2682,-32768,  2975,-32768,    45,-32768,
-32768,   -21,-32768,  1006,    50,    51,-32768,-32768,  1006,-32768,
-32768,-32768,  1278,-32768,  1006,-32768,-32768,    96,   112,    75,
    77,    61,  1006,  1006,    67,  1006,  1006,  1006,-32768,-32768,
  1006,  1006,  1006,  1006,  1006,  1006,  1006,  1006,  1006,  1006,
  1006,  2955,-32768,  1006,    90,   -34,   -34,  1332,   -34,   -34,
  2682,    30,    73,-32768,  1006,  1006,  1006,  1006,  1006,  1006,
    93,  1006,  1006,  1006,  1006,  1006,   -15,   -15,  1006,  1006,
  1006,  1006,  1006,  1006,  1006,  1006,  1006,  1006,  1006,   712,
-32768,   108,   114,  1386,  1030,  1006,  1440,-32768,  1494,   553,
    91,   754,  1548,   133,   137,  1006,  1602,  1656,   158,  1170,
  1224,  2682,  2682,  2682,  2682,  2682,  2682,  2682,  2682,  2682,
  2682,  2682,  1058,  1006,  1006,-32768,   106,   110,-32768,-32768,
  1006,   220,   220,   -34,   -34,   192,   192,   -39,  2823,  2881,
   -34,  2852,   362,-32768,-32768,   246,   246,  2910,  2910,   192,
   192,  2794,  2765,   362,  1710,   362,  1006,  2682,-32768,   107,
   109,-32768,   113,-32768,  1006,   115,  2682,   115,   492,   492,
-32768,-32768,  1006,   796,  1764,   838,  1006,  1006,  1818,   117,
   120,    18,-32768,-32768,   131,  1006,-32768,-32768,  2682,  1114,
-32768,  1006,  2682,  1006,    92,  1006,   -20,   125,   108,   108,
    98,  1872,   160,   143,   143,   193,-32768,  1926,   492,  1980,
   880,   922,  2034,  2088,  2142,   146,   177,   177,   147,-32768,
   149,  2196,-32768,   151,   166,  2736,-32768,-32768,-32768,   167,
   115,-32768,  1006,   186,   188,   492,-32768,-32768,   492,   492,
  2250,   492,  2304,   964,   492,   492,   156,  1006,   184,   189,
-32768,-32768,-32768,-32768,-32768,   598,   194,   143,    73,   195,
   196,-32768,-32768,-32768,   492,-32768,   492,   492,  2358,-32768,
-32768,    12,    -9,  2682,-32768,-32768,-32768,-32768,   197,    85,
    85,-32768,-32768,-32768,   492,   199,   -30,   214,   200,    12,
-32768,  1006,-32768,   643,   202,   201,   204,    33,    85,   207,
-32768,  1006,  1006,   -19,    -7,   213,-32768,  2682,   447,-32768,
    85,-32768,-32768,   218,    33,-32768,  2412,  2466,  1006,  1006,
    -3,-32768,   215,-32768,   219,-32768,-32768,-32768,  2520,  2574,
  1006,-32768,-32768,-32768,-32768,  2628,   688,-32768,   283,   288,
-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,  -261,     0,  -139,    54,-32768,    59,
-32768,  -213,  -195,  -121,  -231,  -299,   -40,  -205,-32768,  -252,
-32768,-32768,-32768,-32768,-32768,-32768,   105,  -176,-32768,-32768,
-32768,     4,   -36,    -1,-32768,-32768,   -91,  -185,-32768,   -11,
  -304
};


#define	YYLAST		3057


static const short yytable[] = {    49,
    35,   235,   167,   246,   247,   290,   296,    56,    49,   223,
   131,   237,   245,   275,   208,   234,   111,    72,   332,   343,
     2,   340,    53,   256,    52,   347,    94,     3,     4,    60,
   359,   117,   118,   132,   347,   326,   171,     3,     4,    54,
   267,    57,   360,   278,    58,    75,   371,    77,   333,   327,
   328,   365,    91,   104,    18,   166,   334,    19,    61,    21,
    22,    91,    95,    24,    25,    26,   319,    27,    28,   133,
   302,   349,   165,   303,   304,   298,   306,    29,   259,   310,
   311,    62,   260,   241,    91,    30,    31,   299,   165,     3,
     4,    59,    65,    69,    70,    71,   364,    73,    74,   322,
    76,   323,   324,   -75,   135,   136,   336,   336,   326,   141,
   377,   144,    63,   145,    32,   146,     3,     4,    60,   341,
   184,   185,   327,   328,   354,   336,   149,   168,   170,   171,
   178,    96,    97,    98,    99,   100,   101,   336,    49,   212,
   264,   354,   265,    18,   199,   213,    19,    61,    21,    22,
   344,   203,    24,    25,    26,   217,    27,    28,   134,   218,
     2,   231,   238,   137,   232,   239,    29,   240,   361,   139,
   142,   261,   243,   143,    30,    31,   257,   147,   148,   258,
   150,   151,   152,   165,   268,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   271,   272,   101,   273,
   276,   287,   288,    32,   292,   291,   294,    49,    49,   172,
   173,   174,   175,   176,   177,   312,   179,   180,   181,   182,
   183,   295,   297,   186,   187,   188,   189,   190,   191,   192,
   193,   194,   195,   196,   198,   105,   106,   107,   108,   207,
   207,   300,   111,   301,   315,   114,   215,    49,   342,   316,
   219,   345,   335,   318,   320,   321,   116,   117,   118,   352,
   346,   351,   119,   120,   353,   107,   108,   356,   229,   230,
   111,   362,   372,   114,    49,   233,   366,    49,    49,   373,
    49,   127,   380,    49,    49,   117,   118,   381,   129,   105,
   106,   107,   108,   270,    49,   212,   111,   269,   355,   114,
   330,   101,     0,    49,     0,    49,    49,     0,     0,   242,
     0,   117,   118,     0,     0,     0,     0,   248,   250,     0,
   253,   254,   255,    49,     0,     0,     0,     0,     0,     0,
   262,     0,    49,   212,     0,     0,   101,     0,   101,     0,
   266,     0,     0,     0,     0,     0,     0,    49,   212,     0,
     0,     0,     0,     0,     0,   281,   283,     0,     0,     0,
     0,     2,     0,     3,     4,     5,     0,     6,     0,     7,
     0,     8,     9,    10,     0,    49,   212,   101,    11,    12,
    13,     0,    14,    15,     0,    16,     0,    17,   309,     0,
    18,     0,   314,    19,    20,    21,    22,     0,    23,    24,
    25,    26,     0,    27,    28,   105,   106,   107,   108,     0,
     0,     0,   111,    29,     0,   114,     0,     0,     0,     0,
     0,    30,    31,     0,     0,     0,     0,   117,   118,     0,
     0,     0,   119,   120,     0,     0,   348,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   357,   358,     0,     0,
    32,     3,     4,     5,     0,     6,     0,     7,     0,     8,
     9,    10,     0,   369,   370,   363,    11,    12,    13,     0,
    14,    15,   288,    16,     0,   376,     0,     0,    18,     0,
     0,    19,    20,    21,    22,     0,    23,    24,    25,    26,
     0,    27,    28,     0,     0,     0,     3,     4,     5,     0,
     6,    29,     7,     0,     8,     9,    10,     0,     0,    30,
    31,    11,    12,    13,     0,    14,    15,     0,    16,     0,
     0,     0,     0,    18,     0,     0,    19,    20,    21,    22,
     0,    23,    24,    25,    26,     0,    27,    28,    32,     0,
     0,     0,     0,     0,     0,     0,    29,     0,     0,     0,
     0,    66,     0,     0,    30,    31,     0,     3,     4,     5,
     0,     6,     0,     7,     0,     8,     9,    10,     0,     0,
     0,     0,    11,    12,    13,     0,    14,    15,     0,    16,
     0,     0,     0,    32,    18,     0,     0,    19,    20,    21,
    22,     0,    23,    24,    25,    26,     0,    27,    28,     0,
     0,     0,     3,     4,     5,     0,     6,    29,     7,     0,
     8,     9,    10,   211,     0,    30,    31,    11,    12,    13,
     0,    14,    15,     0,    16,     0,     0,     0,     0,    18,
     0,     0,    19,    20,    21,    22,     0,    23,    24,    25,
    26,     0,    27,    28,    32,     0,     0,     3,     4,     5,
     0,     6,    29,     7,     0,     8,     9,    10,   317,     0,
    30,    31,    11,    12,    13,     0,    14,    15,     0,    16,
     0,     0,     0,     0,    18,     0,     0,    19,    20,    21,
    22,     0,    23,    24,    25,    26,     0,    27,    28,    32,
     0,     0,     3,     4,     5,     0,     6,    29,     7,     0,
     8,     9,    10,   350,     0,    30,    31,    11,    12,    13,
     0,    14,    15,     0,    16,     0,     3,     4,    60,    18,
     0,     0,    19,    20,    21,    22,     0,    23,    24,    25,
    26,     0,    27,    28,    32,     0,     0,     0,     0,     0,
     0,     0,    29,    18,     0,     0,    19,    61,    21,    22,
    30,    31,    24,    25,    26,     0,    27,    28,     3,     4,
    60,     0,     0,     0,     0,     0,    29,     0,     0,     0,
     0,   197,     0,     0,    30,    31,     0,     0,     0,    32,
     0,     0,     0,     0,     0,    18,     0,     0,    19,    61,
    21,    22,     0,     0,    24,    25,    26,     0,    27,    28,
     3,     4,    60,    32,     0,     0,     0,     0,    29,     0,
     0,     0,   214,     0,     0,     0,    30,    31,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    18,     0,     0,
    19,    61,    21,    22,     0,     0,    24,    25,    26,     0,
    27,    28,     3,     4,    60,    32,     0,     0,     0,     0,
    29,   249,     0,     0,     0,     0,     0,     0,    30,    31,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
     0,     0,    19,    61,    21,    22,     0,     0,    24,    25,
    26,     0,    27,    28,     3,     4,    60,    32,     0,     0,
     0,     0,    29,     0,     0,     0,   252,     0,     0,     0,
    30,    31,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    18,     0,     0,    19,    61,    21,    22,     0,     0,
    24,    25,    26,     0,    27,    28,     3,     4,    60,    32,
     0,     0,     0,     0,    29,   280,     0,     0,     0,     0,
     0,     0,    30,    31,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    18,     0,     0,    19,    61,    21,    22,
     0,     0,    24,    25,    26,     0,    27,    28,     3,     4,
    60,    32,     0,     0,     0,     0,    29,   282,     0,     0,
     0,     0,     0,     0,    30,    31,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    18,     0,     0,    19,    61,
    21,    22,     0,     0,    24,    25,    26,     0,    27,    28,
     3,     4,    60,    32,     0,     0,     0,     0,    29,   308,
     0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
     0,     0,     0,     0,     3,     4,    60,    18,     0,     0,
    19,    61,    21,    22,     0,     0,    24,    25,    26,     0,
    27,    28,     0,     0,     0,    32,     0,     0,     0,     0,
    29,    18,     0,     0,    19,    61,    21,    22,    30,    31,
    24,    25,    26,     0,    27,    28,     0,     0,     0,     0,
     0,     0,     0,     0,    29,     0,     0,     0,     0,     0,
     0,     0,    30,    31,     0,     0,     0,    32,     0,     0,
     0,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,     0,     0,     0,     0,     0,     0,     0,   115,
     0,   205,   116,   117,   118,     0,     0,     0,   119,   120,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   121,   122,   123,   124,   125,   126,   127,     0,     0,
     0,     0,     0,   128,   129,     0,   228,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,     0,     0,
     0,     0,     0,     0,     0,   115,     0,     0,   116,   117,
   118,     0,     0,     0,   119,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   121,   122,   123,
   124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
   129,     0,   263,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,     0,   224,   225,     0,     0,     0,
     0,   115,     0,     0,   116,   117,   118,     0,     0,     0,
   119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     0,     0,     0,     0,     0,   128,   129,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,     0,     0,
   226,     0,   227,     0,     0,   115,     0,     0,   116,   117,
   118,     0,     0,     0,   119,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   121,   122,   123,
   124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
   129,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,     0,     0,     0,     0,   138,     0,     0,   115,
     0,     0,   116,   117,   118,     0,     0,     0,   119,   120,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   121,   122,   123,   124,   125,   126,   127,     0,     0,
     0,     0,     0,   128,   129,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,     0,   169,     0,     0,
     0,     0,     0,   115,     0,     0,   116,   117,   118,     0,
     0,     0,   119,   120,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   121,   122,   123,   124,   125,
   126,   127,     0,     0,     0,     0,     0,   128,   129,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
     0,   204,     0,     0,     0,     0,     0,   115,     0,     0,
   116,   117,   118,     0,     0,     0,   119,   120,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
   122,   123,   124,   125,   126,   127,     0,     0,     0,     0,
     0,   128,   129,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,     0,   209,     0,     0,     0,     0,
     0,   115,     0,     0,   116,   117,   118,     0,     0,     0,
   119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     0,     0,     0,     0,     0,   128,   129,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,     0,   210,
     0,     0,     0,     0,     0,   115,     0,     0,   116,   117,
   118,     0,     0,     0,   119,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   121,   122,   123,
   124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
   129,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,     0,     0,     0,     0,   216,     0,     0,   115,
     0,     0,   116,   117,   118,     0,     0,     0,   119,   120,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   121,   122,   123,   124,   125,   126,   127,     0,     0,
     0,     0,     0,   128,   129,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,     0,   220,     0,     0,
     0,     0,     0,   115,     0,     0,   116,   117,   118,     0,
     0,     0,   119,   120,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   121,   122,   123,   124,   125,
   126,   127,     0,     0,     0,     0,     0,   128,   129,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
     0,   221,     0,     0,     0,     0,     0,   115,     0,     0,
   116,   117,   118,     0,     0,     0,   119,   120,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
   122,   123,   124,   125,   126,   127,     0,     0,     0,     0,
     0,   128,   129,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,     0,     0,     0,   236,     0,     0,
     0,   115,     0,     0,   116,   117,   118,     0,     0,     0,
   119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     0,     0,     0,     0,     0,   128,   129,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,     0,     0,
     0,     0,   251,     0,     0,   115,     0,     0,   116,   117,
   118,     0,     0,     0,   119,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   121,   122,   123,
   124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
   129,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,     0,     0,     0,   243,     0,     0,     0,   115,
     0,     0,   116,   117,   118,     0,     0,     0,   119,   120,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   121,   122,   123,   124,   125,   126,   127,     0,     0,
     0,     0,     0,   128,   129,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,     0,     0,  -154,     0,
     0,     0,     0,   115,     0,     0,   116,   117,   118,     0,
     0,     0,   119,   120,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   121,   122,   123,   124,   125,
   126,   127,     0,     0,     0,     0,     0,   128,   129,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
     0,   277,     0,     0,     0,     0,     0,   115,     0,     0,
   116,   117,   118,     0,     0,     0,   119,   120,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
   122,   123,   124,   125,   126,   127,     0,     0,     0,     0,
     0,   128,   129,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,     0,   279,     0,     0,     0,     0,
     0,   115,     0,     0,   116,   117,   118,     0,     0,     0,
   119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     0,     0,     0,     0,     0,   128,   129,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,     0,     0,
     0,     0,   284,     0,     0,   115,     0,     0,   116,   117,
   118,     0,     0,     0,   119,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   121,   122,   123,
   124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
   129,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,     0,   285,     0,     0,     0,     0,     0,   115,
     0,     0,   116,   117,   118,     0,     0,     0,   119,   120,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   121,   122,   123,   124,   125,   126,   127,     0,     0,
     0,     0,     0,   128,   129,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,     0,   286,     0,     0,
     0,     0,     0,   115,     0,     0,   116,   117,   118,     0,
     0,     0,   119,   120,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   121,   122,   123,   124,   125,
   126,   127,     0,     0,     0,     0,     0,   128,   129,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
     0,     0,     0,     0,   293,     0,     0,   115,     0,     0,
   116,   117,   118,     0,     0,     0,   119,   120,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
   122,   123,   124,   125,   126,   127,     0,     0,     0,     0,
     0,   128,   129,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,     0,   305,     0,     0,     0,     0,
     0,   115,     0,     0,   116,   117,   118,     0,     0,     0,
   119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     0,     0,     0,     0,     0,   128,   129,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,     0,   307,
     0,     0,     0,     0,     0,   115,     0,     0,   116,   117,
   118,     0,     0,     0,   119,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   121,   122,   123,
   124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
   129,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,     0,   325,     0,     0,     0,     0,     0,   115,
     0,     0,   116,   117,   118,     0,     0,     0,   119,   120,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   121,   122,   123,   124,   125,   126,   127,     0,     0,
     0,     0,     0,   128,   129,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,     0,     0,     0,     0,
   367,     0,     0,   115,     0,     0,   116,   117,   118,     0,
     0,     0,   119,   120,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   121,   122,   123,   124,   125,
   126,   127,     0,     0,     0,     0,     0,   128,   129,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
     0,     0,     0,     0,   368,     0,     0,   115,     0,     0,
   116,   117,   118,     0,     0,     0,   119,   120,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
   122,   123,   124,   125,   126,   127,     0,     0,     0,     0,
     0,   128,   129,   105,   106,   107,   108,   109,   110,     0,
   111,   112,   113,   114,     0,     0,     0,     0,   374,     0,
     0,   115,     0,     0,   116,   117,   118,     0,     0,     0,
   119,   120,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   121,   122,   123,   124,   125,   126,   127,
     0,     0,     0,     0,     0,   128,   129,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,     0,     0,
     0,     0,   375,     0,     0,   115,     0,     0,   116,   117,
   118,     0,     0,     0,   119,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   121,   122,   123,
   124,   125,   126,   127,     0,     0,     0,     0,     0,   128,
   129,   105,   106,   107,   108,   109,   110,     0,   111,   112,
   113,   114,     0,     0,     0,     0,   378,     0,     0,   115,
     0,     0,   116,   117,   118,     0,     0,     0,   119,   120,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   121,   122,   123,   124,   125,   126,   127,     0,     0,
     0,     0,     0,   128,   129,   105,   106,   107,   108,   109,
   110,     0,   111,   112,   113,   114,     0,     0,     0,     0,
     0,     0,     0,   115,     0,     0,   116,   117,   118,     0,
     0,     0,   119,   120,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   121,   122,   123,   124,   125,
   126,   127,     0,     0,     0,     0,     0,   128,   129,   105,
   106,   107,   108,   109,   110,     0,   111,   112,   113,   114,
     0,     0,     0,     0,     0,     0,     0,   115,     0,     0,
   116,   117,   118,     0,     0,     0,   119,   120,   105,   106,
   107,   108,   109,   110,     0,   111,   112,   113,   114,   121,
   122,   123,   124,   125,   126,   127,   115,     0,     0,   116,
   117,   118,   129,     0,     0,   119,   120,   105,   106,   107,
   108,   109,   110,     0,   111,   112,   113,   114,   121,   122,
   123,   124,   125,     0,   127,   115,     0,     0,   116,   117,
   118,   129,     0,     0,   119,   120,   105,   106,   107,   108,
   109,   110,     0,   111,     0,   113,   114,   121,   122,   123,
   124,     0,     0,   127,   115,     0,     0,   116,   117,   118,
   129,     0,     0,   119,   120,   105,   106,   107,   108,   109,
   110,     0,   111,     0,   113,   114,   121,   122,   123,   124,
     0,     0,   127,     0,     0,     0,   116,   117,   118,   129,
     0,     0,   119,   120,   105,   106,   107,   108,   109,   110,
     0,   111,     0,     0,   114,   121,   122,   123,   124,     0,
     0,   127,     0,     0,     0,   116,   117,   118,   129,     0,
     0,   119,   120,   105,   106,   107,   108,   109,   110,     0,
   111,     0,     0,   114,   121,   122,   123,   124,     0,     0,
   127,     0,     0,     0,   116,   117,   118,   129,     0,     0,
   119,   120,     0,     0,    78,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   123,   124,     0,     0,   127,
     0,     0,    79,    80,   164,     0,   129,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,     0,     0,     0,
     0,     0,    79,    80,   130,     0,    91,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,     0,     0,     0,
     0,     0,    79,    80,     0,     0,   165,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90
};

static const short yycheck[] = {     1,
     1,   178,    94,   209,   210,   258,   268,     4,    10,   149,
    47,   197,   208,   245,   136,    55,    51,    14,    28,    50,
     3,   321,    38,   219,    38,   330,    55,     5,     6,     7,
    50,    66,    67,    55,   339,    24,    57,     5,     6,    55,
    61,    59,    50,   249,    59,    38,    50,    50,    58,    38,
    39,   351,    92,    59,    32,    92,   318,    35,    36,    37,
    38,    92,    91,    41,    42,    43,   298,    45,    46,    91,
   276,   333,    92,   279,   280,   271,   282,    55,    61,   285,
   286,    59,   222,   205,    92,    63,    64,   273,    92,     5,
     6,    55,    55,    55,    55,    55,   349,    55,    55,   305,
    55,   307,   308,    59,    55,    55,   320,   321,    24,    14,
   372,    37,     8,    37,    92,    55,     5,     6,     7,   325,
   117,   118,    38,    39,   338,   339,    60,    38,    99,    57,
    38,    27,    28,    29,    30,    31,    32,   351,   140,   140,
   232,   355,   234,    32,    37,    55,    35,    36,    37,    38,
   327,    38,    41,    42,    43,    23,    45,    46,    54,    23,
     3,    56,    56,    59,    55,    57,    55,    55,   345,    65,
    59,    41,    58,    69,    63,    64,    60,    73,    74,    60,
    76,    77,    78,    92,    60,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    99,    38,    94,    57,
     8,    56,    26,    92,    56,    59,    56,   209,   210,   105,
   106,   107,   108,   109,   110,    60,   112,   113,   114,   115,
   116,    56,    56,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,    44,    45,    46,    47,   135,
   136,    56,    51,    56,    61,    54,   142,   249,    50,    61,
   146,    38,    56,    60,    60,    60,    65,    66,    67,    59,
    61,    60,    71,    72,    61,    46,    47,    61,   164,   165,
    51,    59,    58,    54,   276,   171,    59,   279,   280,    61,
   282,    90,     0,   285,   286,    66,    67,     0,    97,    44,
    45,    46,    47,   240,   296,   296,    51,   239,   339,    54,
   312,   197,    -1,   305,    -1,   307,   308,    -1,    -1,   205,
    -1,    66,    67,    -1,    -1,    -1,    -1,   213,   214,    -1,
   216,   217,   218,   325,    -1,    -1,    -1,    -1,    -1,    -1,
   226,    -1,   334,   334,    -1,    -1,   232,    -1,   234,    -1,
   236,    -1,    -1,    -1,    -1,    -1,    -1,   349,   349,    -1,
    -1,    -1,    -1,    -1,    -1,   251,   252,    -1,    -1,    -1,
    -1,     3,    -1,     5,     6,     7,    -1,     9,    -1,    11,
    -1,    13,    14,    15,    -1,   377,   377,   273,    20,    21,
    22,    -1,    24,    25,    -1,    27,    -1,    29,   284,    -1,
    32,    -1,   288,    35,    36,    37,    38,    -1,    40,    41,
    42,    43,    -1,    45,    46,    44,    45,    46,    47,    -1,
    -1,    -1,    51,    55,    -1,    54,    -1,    -1,    -1,    -1,
    -1,    63,    64,    -1,    -1,    -1,    -1,    66,    67,    -1,
    -1,    -1,    71,    72,    -1,    -1,   332,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   342,   343,    -1,    -1,
    92,     5,     6,     7,    -1,     9,    -1,    11,    -1,    13,
    14,    15,    -1,   359,   360,    19,    20,    21,    22,    -1,
    24,    25,    26,    27,    -1,   371,    -1,    -1,    32,    -1,
    -1,    35,    36,    37,    38,    -1,    40,    41,    42,    43,
    -1,    45,    46,    -1,    -1,    -1,     5,     6,     7,    -1,
     9,    55,    11,    -1,    13,    14,    15,    -1,    -1,    63,
    64,    20,    21,    22,    -1,    24,    25,    -1,    27,    -1,
    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    37,    38,
    -1,    40,    41,    42,    43,    -1,    45,    46,    92,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
    -1,    60,    -1,    -1,    63,    64,    -1,     5,     6,     7,
    -1,     9,    -1,    11,    -1,    13,    14,    15,    -1,    -1,
    -1,    -1,    20,    21,    22,    -1,    24,    25,    -1,    27,
    -1,    -1,    -1,    92,    32,    -1,    -1,    35,    36,    37,
    38,    -1,    40,    41,    42,    43,    -1,    45,    46,    -1,
    -1,    -1,     5,     6,     7,    -1,     9,    55,    11,    -1,
    13,    14,    15,    61,    -1,    63,    64,    20,    21,    22,
    -1,    24,    25,    -1,    27,    -1,    -1,    -1,    -1,    32,
    -1,    -1,    35,    36,    37,    38,    -1,    40,    41,    42,
    43,    -1,    45,    46,    92,    -1,    -1,     5,     6,     7,
    -1,     9,    55,    11,    -1,    13,    14,    15,    61,    -1,
    63,    64,    20,    21,    22,    -1,    24,    25,    -1,    27,
    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    37,
    38,    -1,    40,    41,    42,    43,    -1,    45,    46,    92,
    -1,    -1,     5,     6,     7,    -1,     9,    55,    11,    -1,
    13,    14,    15,    61,    -1,    63,    64,    20,    21,    22,
    -1,    24,    25,    -1,    27,    -1,     5,     6,     7,    32,
    -1,    -1,    35,    36,    37,    38,    -1,    40,    41,    42,
    43,    -1,    45,    46,    92,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    55,    32,    -1,    -1,    35,    36,    37,    38,
    63,    64,    41,    42,    43,    -1,    45,    46,     5,     6,
     7,    -1,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
    -1,    60,    -1,    -1,    63,    64,    -1,    -1,    -1,    92,
    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,
    37,    38,    -1,    -1,    41,    42,    43,    -1,    45,    46,
     5,     6,     7,    92,    -1,    -1,    -1,    -1,    55,    -1,
    -1,    -1,    59,    -1,    -1,    -1,    63,    64,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,
    35,    36,    37,    38,    -1,    -1,    41,    42,    43,    -1,
    45,    46,     5,     6,     7,    92,    -1,    -1,    -1,    -1,
    55,    56,    -1,    -1,    -1,    -1,    -1,    -1,    63,    64,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,
    -1,    -1,    35,    36,    37,    38,    -1,    -1,    41,    42,
    43,    -1,    45,    46,     5,     6,     7,    92,    -1,    -1,
    -1,    -1,    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,
    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    32,    -1,    -1,    35,    36,    37,    38,    -1,    -1,
    41,    42,    43,    -1,    45,    46,     5,     6,     7,    92,
    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,    -1,    -1,
    -1,    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    32,    -1,    -1,    35,    36,    37,    38,
    -1,    -1,    41,    42,    43,    -1,    45,    46,     5,     6,
     7,    92,    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,
    -1,    -1,    -1,    -1,    63,    64,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    35,    36,
    37,    38,    -1,    -1,    41,    42,    43,    -1,    45,    46,
     5,     6,     7,    92,    -1,    -1,    -1,    -1,    55,    56,
    -1,    -1,    -1,    -1,    -1,    -1,    63,    64,    -1,    -1,
    -1,    -1,    -1,    -1,     5,     6,     7,    32,    -1,    -1,
    35,    36,    37,    38,    -1,    -1,    41,    42,    43,    -1,
    45,    46,    -1,    -1,    -1,    92,    -1,    -1,    -1,    -1,
    55,    32,    -1,    -1,    35,    36,    37,    38,    63,    64,
    41,    42,    43,    -1,    45,    46,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    63,    64,    -1,    -1,    -1,    92,    -1,    -1,
    -1,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
    53,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
    -1,    92,    65,    66,    67,    -1,    -1,    -1,    71,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
    -1,    -1,    -1,    96,    97,    -1,    99,    44,    45,    46,
    47,    48,    49,    -1,    51,    52,    53,    54,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,
    97,    -1,    99,    44,    45,    46,    47,    48,    49,    -1,
    51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,
    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,
    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,
    47,    48,    49,    -1,    51,    52,    53,    54,    -1,    -1,
    57,    -1,    59,    -1,    -1,    62,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,
    97,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
    53,    54,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,
    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,    48,
    49,    -1,    51,    52,    53,    54,    -1,    56,    -1,    -1,
    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,
    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,
    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,
    45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
    65,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,
    -1,    96,    97,    44,    45,    46,    47,    48,    49,    -1,
    51,    52,    53,    54,    -1,    56,    -1,    -1,    -1,    -1,
    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,
    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,
    47,    48,    49,    -1,    51,    52,    53,    54,    -1,    56,
    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,
    97,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
    53,    54,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,
    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,    48,
    49,    -1,    51,    52,    53,    54,    -1,    56,    -1,    -1,
    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,
    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,
    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,
    45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
    65,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,
    -1,    96,    97,    44,    45,    46,    47,    48,    49,    -1,
    51,    52,    53,    54,    -1,    -1,    -1,    58,    -1,    -1,
    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,
    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,
    47,    48,    49,    -1,    51,    52,    53,    54,    -1,    -1,
    -1,    -1,    59,    -1,    -1,    62,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,
    97,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
    53,    54,    -1,    -1,    -1,    58,    -1,    -1,    -1,    62,
    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,    48,
    49,    -1,    51,    52,    53,    54,    -1,    -1,    57,    -1,
    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,
    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,
    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,
    45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
    65,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,
    -1,    96,    97,    44,    45,    46,    47,    48,    49,    -1,
    51,    52,    53,    54,    -1,    56,    -1,    -1,    -1,    -1,
    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,
    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,
    47,    48,    49,    -1,    51,    52,    53,    54,    -1,    -1,
    -1,    -1,    59,    -1,    -1,    62,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,
    97,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
    53,    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,
    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,    48,
    49,    -1,    51,    52,    53,    54,    -1,    56,    -1,    -1,
    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,
    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,
    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,
    45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,    -1,
    65,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,
    -1,    96,    97,    44,    45,    46,    47,    48,    49,    -1,
    51,    52,    53,    54,    -1,    56,    -1,    -1,    -1,    -1,
    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,
    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,
    47,    48,    49,    -1,    51,    52,    53,    54,    -1,    56,
    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,
    97,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
    53,    54,    -1,    56,    -1,    -1,    -1,    -1,    -1,    62,
    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,    48,
    49,    -1,    51,    52,    53,    54,    -1,    -1,    -1,    -1,
    59,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,
    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,
    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,
    45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,    -1,    -1,
    65,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
    85,    86,    87,    88,    89,    90,    -1,    -1,    -1,    -1,
    -1,    96,    97,    44,    45,    46,    47,    48,    49,    -1,
    51,    52,    53,    54,    -1,    -1,    -1,    -1,    59,    -1,
    -1,    62,    -1,    -1,    65,    66,    67,    -1,    -1,    -1,
    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
    -1,    -1,    -1,    -1,    -1,    96,    97,    44,    45,    46,
    47,    48,    49,    -1,    51,    52,    53,    54,    -1,    -1,
    -1,    -1,    59,    -1,    -1,    62,    -1,    -1,    65,    66,
    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,    85,    86,
    87,    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    96,
    97,    44,    45,    46,    47,    48,    49,    -1,    51,    52,
    53,    54,    -1,    -1,    -1,    -1,    59,    -1,    -1,    62,
    -1,    -1,    65,    66,    67,    -1,    -1,    -1,    71,    72,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    84,    85,    86,    87,    88,    89,    90,    -1,    -1,
    -1,    -1,    -1,    96,    97,    44,    45,    46,    47,    48,
    49,    -1,    51,    52,    53,    54,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    62,    -1,    -1,    65,    66,    67,    -1,
    -1,    -1,    71,    72,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    84,    85,    86,    87,    88,
    89,    90,    -1,    -1,    -1,    -1,    -1,    96,    97,    44,
    45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    -1,    -1,
    65,    66,    67,    -1,    -1,    -1,    71,    72,    44,    45,
    46,    47,    48,    49,    -1,    51,    52,    53,    54,    84,
    85,    86,    87,    88,    89,    90,    62,    -1,    -1,    65,
    66,    67,    97,    -1,    -1,    71,    72,    44,    45,    46,
    47,    48,    49,    -1,    51,    52,    53,    54,    84,    85,
    86,    87,    88,    -1,    90,    62,    -1,    -1,    65,    66,
    67,    97,    -1,    -1,    71,    72,    44,    45,    46,    47,
    48,    49,    -1,    51,    -1,    53,    54,    84,    85,    86,
    87,    -1,    -1,    90,    62,    -1,    -1,    65,    66,    67,
    97,    -1,    -1,    71,    72,    44,    45,    46,    47,    48,
    49,    -1,    51,    -1,    53,    54,    84,    85,    86,    87,
    -1,    -1,    90,    -1,    -1,    -1,    65,    66,    67,    97,
    -1,    -1,    71,    72,    44,    45,    46,    47,    48,    49,
    -1,    51,    -1,    -1,    54,    84,    85,    86,    87,    -1,
    -1,    90,    -1,    -1,    -1,    65,    66,    67,    97,    -1,
    -1,    71,    72,    44,    45,    46,    47,    48,    49,    -1,
    51,    -1,    -1,    54,    84,    85,    86,    87,    -1,    -1,
    90,    -1,    -1,    -1,    65,    66,    67,    97,    -1,    -1,
    71,    72,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    86,    87,    -1,    -1,    90,
    -1,    -1,    68,    69,    50,    -1,    97,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    -1,    -1,    -1,
    -1,    -1,    68,    69,    50,    -1,    92,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    -1,    -1,    -1,
    -1,    -1,    68,    69,    -1,    -1,    92,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 166 "cmdgram.y"
{ ;
    break;}
case 2:
#line 171 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 3:
#line 173 "cmdgram.y"
{ if(!gStatementList) { gStatementList = yyvsp[0].stmt; } else { gStatementList->append(yyvsp[0].stmt); } ;
    break;}
case 4:
#line 178 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 5:
#line 180 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 6:
#line 182 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 7:
#line 187 "cmdgram.y"
{ yyval.stmt = yyvsp[-2].stmt; for(StmtNode *walk = (yyvsp[-2].stmt);walk;walk = walk->getNext() ) walk->setPackage(yyvsp[-4].s.value); ;
    break;}
case 8:
#line 192 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 9:
#line 194 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; (yyvsp[-1].stmt)->append(yyvsp[0].stmt);  ;
    break;}
case 10:
#line 199 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 11:
#line 201 "cmdgram.y"
{ if(!yyvsp[-1].stmt) { yyval.stmt = yyvsp[0].stmt; } else { (yyvsp[-1].stmt)->append(yyvsp[0].stmt); yyval.stmt = yyvsp[-1].stmt; } ;
    break;}
case 18:
#line 212 "cmdgram.y"
{ yyval.stmt = BreakStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 19:
#line 214 "cmdgram.y"
{ yyval.stmt = ContinueStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 20:
#line 216 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-1].i.lineNumber, NULL ); ;
    break;}
case 21:
#line 218 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-2].i.lineNumber, yyvsp[-1].expr ); ;
    break;}
case 22:
#line 220 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 23:
#line 222 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr, NULL ); ;
    break;}
case 24:
#line 224 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[-1].expr ); ;
    break;}
case 25:
#line 226 "cmdgram.y"
{ yyval.stmt = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false, true ); ;
    break;}
case 26:
#line 231 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-7].i.lineNumber, yyvsp[-6].s.value, NULL, yyvsp[-4].param, yyvsp[-1].stmt ); ;
    break;}
case 27:
#line 233 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-6].s.value, yyvsp[-8].s.value, yyvsp[-4].param, yyvsp[-1].stmt ); ;
    break;}
case 28:
#line 238 "cmdgram.y"
{ yyval.param = NULL; ;
    break;}
case 29:
#line 240 "cmdgram.y"
{ yyval.param = yyvsp[0].param; ;
    break;}
case 30:
#line 245 "cmdgram.y"
{ yyval.param = yyvsp[0].param; ;
    break;}
case 31:
#line 247 "cmdgram.y"
{ yyval.param = yyvsp[-2].param; ((StmtNode*)(yyvsp[-2].param))->append((StmtNode*)yyvsp[0].param); ;
    break;}
case 32:
#line 252 "cmdgram.y"
{ yyval.param = ParamNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, false ); ;
    break;}
case 33:
#line 257 "cmdgram.y"
{ yyval.stmt = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, NULL, yyvsp[-5].s.value, yyvsp[-2].slist, NULL, true, false, false); ;
    break;}
case 34:
#line 262 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, false); ;
    break;}
case 35:
#line 264 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, false); ;
    break;}
case 36:
#line 266 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-11].i.lineNumber, yyvsp[-10].expr, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, true, false); ;
    break;}
case 37:
#line 268 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-8].i.lineNumber, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, true, false); ;
    break;}
case 38:
#line 270 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, true); ;
    break;}
case 39:
#line 272 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, true); ;
    break;}
case 40:
#line 277 "cmdgram.y"
{ yyval.s.value = NULL; ;
    break;}
case 41:
#line 279 "cmdgram.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 42:
#line 284 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( CodeBlock::smCurrentParser->getCurrentLine(), "", false); ;
    break;}
case 43:
#line 286 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 44:
#line 291 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 45:
#line 293 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 46:
#line 298 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = NULL; ;
    break;}
case 47:
#line 300 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[0].slist; yyval.odcl.decls = NULL; ;
    break;}
case 48:
#line 302 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 49:
#line 304 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[-1].slist; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 50:
#line 309 "cmdgram.y"
{ yyval.od = yyvsp[-1].od; ;
    break;}
case 51:
#line 311 "cmdgram.y"
{ yyvsp[-2].od->append(yyvsp[-1].od); yyval.od = yyvsp[-2].od; ;
    break;}
case 52:
#line 316 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 53:
#line 318 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 54:
#line 323 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, false); ;
    break;}
case 55:
#line 325 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, true); ;
    break;}
case 56:
#line 330 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 57:
#line 332 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].stmt, yyvsp[0].stmt, false); ;
    break;}
case 58:
#line 334 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-4].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].stmt, yyvsp[0].ifnode, true); ;
    break;}
case 59:
#line 339 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr;;
    break;}
case 60:
#line 341 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr=yyvsp[-2].expr; ;
    break;}
case 61:
#line 346 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-4].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 62:
#line 348 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, yyvsp[-2].stmt, yyvsp[0].stmt, false); ;
    break;}
case 63:
#line 353 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-4].i.lineNumber, nil, yyvsp[-2].expr, nil, yyvsp[0].stmt, false); ;
    break;}
case 64:
#line 355 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-3].i.lineNumber, nil, yyvsp[-1].expr, nil, yyvsp[-4].stmt, true); ;
    break;}
case 65:
#line 360 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-8].i.lineNumber, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 66:
#line 362 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 67:
#line 364 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 68:
#line 366 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 69:
#line 368 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 70:
#line 370 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 71:
#line 372 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 72:
#line 374 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-5].i.lineNumber, NULL, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 73:
#line 379 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, false ); ;
    break;}
case 74:
#line 381 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, true ); ;
    break;}
case 75:
#line 386 "cmdgram.y"
{ yyval.stmt = yyvsp[0].expr; ;
    break;}
case 76:
#line 391 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 77:
#line 393 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 78:
#line 395 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 79:
#line 397 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 80:
#line 399 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 81:
#line 401 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 82:
#line 403 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 83:
#line 405 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 84:
#line 407 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 85:
#line 409 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 86:
#line 411 "cmdgram.y"
{ yyval.expr = FloatUnaryExprNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 87:
#line 413 "cmdgram.y"
{ yyval.expr = TTagDerefNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[0].expr ); ;
    break;}
case 88:
#line 415 "cmdgram.y"
{ yyval.expr = TTagExprNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 89:
#line 417 "cmdgram.y"
{ yyval.expr = ConditionalExprNode::alloc( yyvsp[-4].expr->dbgLineNumber, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 90:
#line 419 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 91:
#line 421 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 92:
#line 423 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 93:
#line 425 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 94:
#line 427 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 95:
#line 429 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 96:
#line 431 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 97:
#line 433 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 98:
#line 435 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 99:
#line 437 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 100:
#line 439 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, true); ;
    break;}
case 101:
#line 441 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, false); ;
    break;}
case 102:
#line 443 "cmdgram.y"
{ yyval.expr = StrcatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].i.value); ;
    break;}
case 103:
#line 445 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 104:
#line 447 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 105:
#line 449 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, true); ;
    break;}
case 106:
#line 451 "cmdgram.y"
{ yyval.expr = FloatNode::alloc( yyvsp[0].f.lineNumber, yyvsp[0].f.value ); ;
    break;}
case 107:
#line 453 "cmdgram.y"
{ yyval.expr = IntNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value ); ;
    break;}
case 108:
#line 455 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].i.lineNumber, StringTable->insert("break")); ;
    break;}
case 109:
#line 457 "cmdgram.y"
{ yyval.expr = SlotAccessNode::alloc( yyvsp[0].slot.lineNumber, yyvsp[0].slot.object, yyvsp[0].slot.array, yyvsp[0].slot.slotName ); ;
    break;}
case 110:
#line 459 "cmdgram.y"
{ yyval.expr = InternalSlotAccessNode::alloc( yyvsp[0].intslot.lineNumber, yyvsp[0].intslot.object, yyvsp[0].intslot.slotExpr, yyvsp[0].intslot.recurse); ;
    break;}
case 111:
#line 461 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 112:
#line 463 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false); ;
    break;}
case 113:
#line 465 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL); ;
    break;}
case 114:
#line 467 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[-1].s.lineNumber, yyvsp[-1].s.value, yyvsp[0].expr ); ;
    break;}
case 115:
#line 469 "cmdgram.y"
{ yyval.expr = yyvsp[0].aln; ;
    break;}
case 116:
#line 491 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 117:
#line 493 "cmdgram.y"
{ yyval.expr = yyvsp[-3].expr; ((StmtNode*)(yyvsp[-3].expr))->append((StmtNode*)yyvsp[-1].expr); ;
    break;}
case 118:
#line 498 "cmdgram.y"
{ yyval.aln = ArrayLiteralNode::alloc( yyvsp[-1].expr->dbgLineNumber, yyvsp[-1].expr ); ;
    break;}
case 119:
#line 503 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.slot.object = yyvsp[-2].expr; yyval.slot.slotName = yyvsp[0].s.value; yyval.slot.array = NULL; ;
    break;}
case 120:
#line 505 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-3].expr->dbgLineNumber; yyval.slot.object = yyvsp[-3].expr; yyval.slot.slotName = yyvsp[-1].s.value; yyval.slot.array = yyvsp[0].expr; ;
    break;}
case 121:
#line 510 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = false; ;
    break;}
case 122:
#line 512 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = true; ;
    break;}
case 123:
#line 517 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 124:
#line 519 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 125:
#line 524 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = opPLUSPLUS; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 126:
#line 526 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = opMINUSMINUS; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 127:
#line 528 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '+'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 128:
#line 530 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '-'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 129:
#line 532 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '*'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 130:
#line 534 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '/'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 131:
#line 536 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '%'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 132:
#line 538 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '&'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 133:
#line 540 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '^'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 134:
#line 542 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '|'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 135:
#line 544 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHL; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 136:
#line 546 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHR; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 137:
#line 551 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 138:
#line 553 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 139:
#line 555 "cmdgram.y"
{ yyval.expr = yyvsp[0].od; ;
    break;}
case 140:
#line 557 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-2].s.lineNumber, yyvsp[-2].s.value, NULL, yyvsp[0].expr); ;
    break;}
case 141:
#line 559 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 142:
#line 561 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-1].s.lineNumber, yyvsp[-1].s.value, NULL, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 143:
#line 563 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-2].s.lineNumber, yyvsp[-2].s.value, yyvsp[-1].expr, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 144:
#line 565 "cmdgram.y"
{ yyval.expr = SlotAssignOpNode::alloc( yyvsp[-1].slot.lineNumber, yyvsp[-1].slot.object, yyvsp[-1].slot.slotName, yyvsp[-1].slot.array, yyvsp[0].asn.token, yyvsp[0].asn.expr); ;
    break;}
case 145:
#line 567 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-2].slot.lineNumber, yyvsp[-2].slot.object, yyvsp[-2].slot.array, yyvsp[-2].slot.slotName, yyvsp[0].expr); ;
    break;}
case 146:
#line 569 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-4].slot.lineNumber, yyvsp[-4].slot.object, yyvsp[-4].slot.array, yyvsp[-4].slot.slotName, yyvsp[-1].expr); ;
    break;}
case 147:
#line 574 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, NULL, yyvsp[-1].expr, false); ;
    break;}
case 148:
#line 576 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-3].s.value, yyvsp[-5].s.value, yyvsp[-1].expr, false); ;
    break;}
case 149:
#line 578 "cmdgram.y"
{ yyvsp[-5].expr->append(yyvsp[-1].expr); yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].expr->dbgLineNumber, yyvsp[-3].s.value, NULL, yyvsp[-5].expr, true); ;
    break;}
case 150:
#line 588 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-1].expr, NULL ); ;
    break;}
case 151:
#line 590 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-5].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].str.value ); ;
    break;}
case 152:
#line 595 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 153:
#line 597 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 154:
#line 602 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 155:
#line 604 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 156:
#line 609 "cmdgram.y"
{ yyval.slist = NULL; ;
    break;}
case 157:
#line 611 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 158:
#line 616 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 159:
#line 618 "cmdgram.y"
{ yyvsp[-1].slist->append(yyvsp[0].slist); yyval.slist = yyvsp[-1].slist; ;
    break;}
case 160:
#line 623 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].s.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr); ;
    break;}
case 161:
#line 625 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-4].i.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr, yyvsp[-4].i.value); ;
    break;}
case 162:
#line 627 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].i.lineNumber, NULL, NULL, StringTable->insert("datablock"), yyvsp[-1].expr); ;
    break;}
case 163:
#line 629 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-4].s.lineNumber, NULL, yyvsp[-3].expr, yyvsp[-4].s.value, yyvsp[-1].expr); ;
    break;}
case 164:
#line 631 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-5].i.lineNumber, NULL, yyvsp[-3].expr, yyvsp[-4].s.value, yyvsp[-1].expr, yyvsp[-5].i.value); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 633 "cmdgram.y"


