
/*  A Bison parser, made from cmdgram.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse CMDparse
#define yylex CMDlex
#define yyerror CMDerror
#define yylval CMDlval
#define yychar CMDchar
#define yydebug CMDdebug
#define yynerrs CMDnerrs
#define	rwDEFINE	258
#define	rwENDDEF	259
#define	rwDECLARE	260
#define	rwDECLARESINGLETON	261
#define	rwBREAK	262
#define	rwELSE	263
#define	rwCONTINUE	264
#define	rwGLOBAL	265
#define	rwIF	266
#define	rwNIL	267
#define	rwRETURN	268
#define	rwWHILE	269
#define	rwDO	270
#define	rwENDIF	271
#define	rwENDWHILE	272
#define	rwENDFOR	273
#define	rwDEFAULT	274
#define	rwFOR	275
#define	rwFOREACH	276
#define	rwFOREACHSTR	277
#define	rwIN	278
#define	rwDATABLOCK	279
#define	rwSWITCH	280
#define	rwCASE	281
#define	rwSWITCHSTR	282
#define	rwCASEOR	283
#define	rwPACKAGE	284
#define	rwNAMESPACE	285
#define	rwCLASS	286
#define	rwASSERT	287
#define	rwINT	288
#define	rwFLOAT	289
#define	rwSTRING	290
#define	rwBOOL	291
#define	ILLEGAL_TOKEN	292
#define	CHRCONST	293
#define	INTCONST	294
#define	TTAG	295
#define	VAR	296
#define	IDENT	297
#define	TYPEIDENT	298
#define	DOCBLOCK	299
#define	STRATOM	300
#define	TAGATOM	301
#define	FLTCONST	302
#define	opINTNAME	303
#define	opINTNAMER	304
#define	opMINUSMINUS	305
#define	opPLUSPLUS	306
#define	STMT_SEP	307
#define	opSHL	308
#define	opSHR	309
#define	opPLASN	310
#define	opMIASN	311
#define	opMLASN	312
#define	opDVASN	313
#define	opMODASN	314
#define	opANDASN	315
#define	opXORASN	316
#define	opORASN	317
#define	opSLASN	318
#define	opSRASN	319
#define	opCAT	320
#define	opEQ	321
#define	opNE	322
#define	opGE	323
#define	opLE	324
#define	opAND	325
#define	opOR	326
#define	opSTREQ	327
#define	opCOLONCOLON	328
#define	opMDASN	329
#define	opNDASN	330
#define	opNTASN	331
#define	opSTRNE	332
#define	UNARY	333

#line 1 "cmdgram.y"


// bison --defines=cmdgram.h --verbose -o cmdgram.cpp -p CMD CMDgram.y

// Make sure we don't get gram.h twice.
#define _CMDGRAM_H_

#include <stdlib.h>
#include <stdio.h>
#include "console/console.h"
#include "console/compiler.h"
#include "console/consoleInternal.h"
#include "core/strings/stringFunctions.h"

#ifndef YYDEBUG
#define YYDEBUG 0
#endif

#define YYSSIZE 350

int outtext(char *fmt, ...);
extern int serrors;

#define nil 0
#undef YY_ARGS
#define YY_ARGS(x)   x

int CMDlex();
void CMDerror(char *, ...);

#ifdef alloca
#undef alloca
#endif
#define alloca dMalloc

template< typename T >
struct Token
{
   T value;
   U32 lineNumber;
};

#line 44 "cmdgram.y"

        /* Reserved Word Definitions */
#line 56 "cmdgram.y"

        /* Constants and Identifier Definitions */
#line 70 "cmdgram.y"

        /* Operator Definitions */

#line 83 "cmdgram.y"
typedef union {
   Token< char >           c;
   Token< int >            i;
   Token< const char* >    s;
   Token< char* >          str;
   Token< double >         f;
   StmtNode*               stmt;
   ExprNode*               expr;
   SlotAssignNode*         slist;
   VarNode*                var;
   SlotDecl                slot;
   InternalSlotDecl        intslot;
   ObjectBlockDecl         odcl;
   ObjectDeclNode*         od;
   AssignDecl              asn;
   IfStmtNode*             ifnode;
   ParamNode*              param;
   TypeNode*               typeNode;
   AssignExprNode*         aen;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		407
#define	YYFLAG		-32768
#define	YYNTBASE	104

#define YYTRANSLATE(x) ((unsigned)(x) <= 333 ? yytranslate[x] : 147)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    68,     2,     2,     2,    58,    57,     2,    59,
    60,    50,    48,    61,    49,    55,    51,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    62,    63,    52,
    54,    53,   100,    69,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    96,     2,   103,    66,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    64,    56,    65,    67,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    97,    98,
    99,   101,   102
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     8,    10,    12,    19,    21,    24,
    25,    28,    30,    32,    34,    36,    38,    40,    43,    46,
    49,    53,    56,    61,    68,    70,    79,    90,    91,    93,
    95,    99,   103,   105,   116,   127,   135,   148,   158,   169,
   177,   178,   181,   182,   184,   185,   188,   189,   191,   193,
   196,   199,   203,   207,   209,   217,   225,   230,   238,   244,
   246,   250,   256,   264,   270,   277,   287,   296,   305,   313,
   322,   330,   338,   345,   353,   361,   363,   365,   367,   371,
   375,   379,   383,   387,   391,   395,   399,   403,   406,   409,
   411,   417,   421,   425,   429,   433,   437,   441,   445,   449,
   453,   457,   461,   465,   469,   472,   475,   477,   479,   481,
   483,   485,   487,   489,   491,   493,   498,   506,   510,   517,
   521,   525,   527,   531,   533,   535,   538,   541,   544,   547,
   550,   553,   556,   559,   562,   565,   567,   569,   571,   575,
   579,   586,   589,   595,   598,   602,   608,   614,   619,   626,
   633,   638,   643,   650,   651,   653,   655,   659,   660,   662,
   664,   667,   672,   678,   683,   691,   700,   702,   706,   708,
   710,   712,   714
};

static const short yyrhs[] = {   105,
     0,     0,   105,   106,     0,   110,     0,   111,     0,   107,
     0,    29,    42,    64,   108,    65,    63,     0,   111,     0,
   108,   111,     0,     0,   109,   110,     0,   126,     0,   127,
     0,   128,     0,   129,     0,   115,     0,   123,     0,     7,
    63,     0,     9,    63,     0,    13,    63,     0,    13,   131,
    63,     0,   130,    63,     0,    40,    54,   131,    63,     0,
    40,    54,   131,    61,   131,    63,     0,    44,     0,     3,
    42,    59,   112,    60,    64,   109,    65,     0,     3,    42,
    95,    42,    59,   112,    60,    64,   109,    65,     0,     0,
   113,     0,   114,     0,   113,    61,   114,     0,    41,    62,
   146,     0,    41,     0,    24,   134,    59,   131,   117,    60,
    64,   142,    65,    63,     0,     5,   134,    59,   118,   117,
   119,    60,    64,   120,    65,     0,     5,   134,    59,   118,
   117,   119,    60,     0,     5,   134,    59,    96,   118,   103,
   117,   119,    60,    64,   120,    65,     0,     5,   134,    59,
    96,   118,   103,   117,   119,    60,     0,     6,   134,    59,
   118,   117,   119,    60,    64,   120,    65,     0,     6,   134,
    59,   118,   117,   119,    60,     0,     0,    62,    42,     0,
     0,   131,     0,     0,    61,   141,     0,     0,   143,     0,
   121,     0,   143,   121,     0,   116,    63,     0,   121,   116,
    63,     0,    64,   109,    65,     0,   110,     0,    25,    59,
   131,    60,    64,   124,    65,     0,    27,    59,   131,    60,
    64,   124,    65,     0,    26,   125,    62,   109,     0,    26,
   125,    62,   109,    19,    62,   109,     0,    26,   125,    62,
   109,   124,     0,   131,     0,   125,    28,   131,     0,    11,
    59,   131,    60,   122,     0,    11,    59,   131,    60,   122,
     8,   122,     0,    14,    59,   131,    60,   122,     0,    15,
   122,    14,    59,   131,    60,     0,    20,    59,   131,    63,
   131,    63,   131,    60,   122,     0,    20,    59,   131,    63,
   131,    63,    60,   122,     0,    20,    59,   131,    63,    63,
   131,    60,   122,     0,    20,    59,   131,    63,    63,    60,
   122,     0,    20,    59,    63,   131,    63,   131,    60,   122,
     0,    20,    59,    63,   131,    63,    60,   122,     0,    20,
    59,    63,    63,   131,    60,   122,     0,    20,    59,    63,
    63,    60,   122,     0,    21,    59,    41,    23,   131,    60,
   122,     0,    22,    59,    41,    23,   131,    60,   122,     0,
   136,     0,   137,     0,   136,     0,    59,   131,    60,     0,
   131,    66,   131,     0,   131,    58,   131,     0,   131,    57,
   131,     0,   131,    56,   131,     0,   131,    48,   131,     0,
   131,    49,   131,     0,   131,    50,   131,     0,   131,    51,
   131,     0,    49,   131,     0,    50,   131,     0,    40,     0,
   131,   100,   131,    62,   131,     0,   131,    52,   131,     0,
   131,    53,   131,     0,   131,    90,   131,     0,   131,    91,
   131,     0,   131,    88,   131,     0,   131,    89,   131,     0,
   131,    93,   131,     0,   131,    75,   131,     0,   131,    76,
   131,     0,   131,    92,   131,     0,   131,    94,   131,     0,
   131,   101,   131,     0,   131,    69,   131,     0,    68,   131,
     0,    67,   131,     0,    46,     0,    47,     0,    39,     0,
     7,     0,   132,     0,   133,     0,    42,     0,    45,     0,
    41,     0,    41,    96,   145,   103,     0,     3,    59,   112,
    60,    64,   109,    65,     0,   131,    55,    42,     0,   131,
    55,    42,    96,   145,   103,     0,   131,    70,   134,     0,
   131,    71,   134,     0,    42,     0,    59,   131,    60,     0,
    73,     0,    72,     0,    77,   131,     0,    78,   131,     0,
    79,   131,     0,    80,   131,     0,    81,   131,     0,    82,
   131,     0,    83,   131,     0,    84,   131,     0,    85,   131,
     0,    86,   131,     0,   138,     0,   139,     0,   116,     0,
    41,    54,   131,     0,    59,   137,    60,     0,    41,    96,
   145,   103,    54,   131,     0,    41,   135,     0,    41,    96,
   145,   103,   135,     0,   132,   135,     0,   132,    54,   131,
     0,   132,    54,    64,   141,    65,     0,    41,    62,   146,
    54,   131,     0,    42,    59,   140,    60,     0,    42,    95,
    42,    59,   140,    60,     0,   131,    55,    42,    59,   140,
    60,     0,   131,    59,   140,    60,     0,    32,    59,   131,
    60,     0,    32,    59,   131,    61,    45,    60,     0,     0,
   141,     0,   131,     0,   141,    61,   131,     0,     0,   143,
     0,   144,     0,   143,   144,     0,    42,    54,   131,    63,
     0,    43,    42,    54,   131,    63,     0,    24,    54,   131,
    63,     0,    42,    96,   145,   103,    54,   131,    63,     0,
    43,    42,    96,   145,   103,    54,   131,    63,     0,   131,
     0,   145,    61,   131,     0,    33,     0,    34,     0,    36,
     0,    35,     0,    43,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   168,   173,   175,   180,   182,   184,   189,   194,   196,   201,
   203,   208,   209,   210,   211,   212,   213,   214,   216,   218,
   220,   222,   224,   226,   228,   233,   235,   240,   242,   247,
   249,   254,   256,   261,   266,   268,   270,   272,   274,   276,
   281,   283,   288,   290,   295,   297,   302,   304,   306,   308,
   313,   315,   320,   322,   327,   329,   334,   336,   338,   343,
   345,   350,   352,   357,   359,   364,   366,   368,   370,   372,
   374,   376,   378,   383,   385,   390,   392,   397,   399,   401,
   403,   405,   407,   409,   411,   413,   415,   417,   419,   421,
   423,   425,   427,   429,   431,   433,   435,   437,   439,   441,
   443,   445,   447,   449,   451,   453,   455,   457,   459,   461,
   463,   465,   467,   469,   471,   473,   475,   493,   495,   500,
   502,   507,   509,   514,   516,   518,   520,   522,   524,   526,
   528,   530,   532,   534,   536,   541,   543,   545,   547,   549,
   551,   553,   555,   557,   559,   561,   566,   571,   573,   575,
   577,   582,   584,   589,   591,   596,   598,   603,   605,   610,
   612,   617,   619,   621,   623,   625,   630,   632,   637,   639,
   641,   643,   645
};

static const char * const yytname[] = {   "$","error","$undefined.","rwDEFINE",
"rwENDDEF","rwDECLARE","rwDECLARESINGLETON","rwBREAK","rwELSE","rwCONTINUE",
"rwGLOBAL","rwIF","rwNIL","rwRETURN","rwWHILE","rwDO","rwENDIF","rwENDWHILE",
"rwENDFOR","rwDEFAULT","rwFOR","rwFOREACH","rwFOREACHSTR","rwIN","rwDATABLOCK",
"rwSWITCH","rwCASE","rwSWITCHSTR","rwCASEOR","rwPACKAGE","rwNAMESPACE","rwCLASS",
"rwASSERT","rwINT","rwFLOAT","rwSTRING","rwBOOL","ILLEGAL_TOKEN","CHRCONST",
"INTCONST","TTAG","VAR","IDENT","TYPEIDENT","DOCBLOCK","STRATOM","TAGATOM","FLTCONST",
"'+'","'-'","'*'","'/'","'<'","'>'","'='","'.'","'|'","'&'","'%'","'('","')'",
"','","':'","';'","'{'","'}'","'^'","'~'","'!'","'@'","opINTNAME","opINTNAMER",
"opMINUSMINUS","opPLUSPLUS","STMT_SEP","opSHL","opSHR","opPLASN","opMIASN","opMLASN",
"opDVASN","opMODASN","opANDASN","opXORASN","opORASN","opSLASN","opSRASN","opCAT",
"opEQ","opNE","opGE","opLE","opAND","opOR","opSTREQ","opCOLONCOLON","'['","opMDASN",
"opNDASN","opNTASN","'?'","opSTRNE","UNARY","']'","start","decl_list","decl",
"package_decl","fn_decl_list","statement_list","stmt","fn_decl_stmt","var_list_decl",
"var_list_typed","var_typed_decl","datablock_decl","object_decl","parent_block",
"object_name","object_args","object_declare_block","object_decl_list","stmt_block",
"switch_stmt","case_block","case_expr","if_stmt","while_stmt","for_stmt","foreach_stmt",
"expression_stmt","expr","slot_acc","intslot_acc","class_name_expr","assign_op_struct",
"stmt_expr","var_assign_expr","funcall_expr","assert_expr","expr_list_decl",
"expr_list","slot_assign_list_opt","slot_assign_list","slot_assign","aidx_expr",
"var_type",""
};
#endif

static const short yyr1[] = {     0,
   104,   105,   105,   106,   106,   106,   107,   108,   108,   109,
   109,   110,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   111,   111,   112,   112,   113,
   113,   114,   114,   115,   116,   116,   116,   116,   116,   116,
   117,   117,   118,   118,   119,   119,   120,   120,   120,   120,
   121,   121,   122,   122,   123,   123,   124,   124,   124,   125,
   125,   126,   126,   127,   127,   128,   128,   128,   128,   128,
   128,   128,   128,   129,   129,   130,   130,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   131,   131,   131,   131,   131,   131,   131,   132,   132,   133,
   133,   134,   134,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   136,   136,   136,   136,   136,
   136,   136,   136,   136,   136,   136,   137,   138,   138,   138,
   138,   139,   139,   140,   140,   141,   141,   142,   142,   143,
   143,   144,   144,   144,   144,   144,   145,   145,   146,   146,
   146,   146,   146
};

static const short yyr2[] = {     0,
     1,     0,     2,     1,     1,     1,     6,     1,     2,     0,
     2,     1,     1,     1,     1,     1,     1,     2,     2,     2,
     3,     2,     4,     6,     1,     8,    10,     0,     1,     1,
     3,     3,     1,    10,    10,     7,    12,     9,    10,     7,
     0,     2,     0,     1,     0,     2,     0,     1,     1,     2,
     2,     3,     3,     1,     7,     7,     4,     7,     5,     1,
     3,     5,     7,     5,     6,     9,     8,     8,     7,     8,
     7,     7,     6,     7,     7,     1,     1,     1,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     2,     2,     1,
     5,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     2,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     4,     7,     3,     6,     3,
     3,     1,     3,     1,     1,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     1,     1,     3,     3,
     6,     2,     5,     2,     3,     5,     5,     4,     6,     6,
     4,     4,     6,     0,     1,     1,     3,     0,     1,     1,
     2,     4,     5,     4,     7,     8,     1,     3,     1,     1,
     1,     1,     1
};

static const short yydefact[] = {     2,
     1,     0,     0,     0,   110,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   109,    90,
   115,   113,    25,   114,   107,   108,     0,     0,     0,     0,
     0,     3,     6,     4,     5,    16,   138,    17,    12,    13,
    14,    15,     0,     0,   111,   112,    78,    77,   136,   137,
     0,    28,   122,     0,     0,     0,    18,    19,     0,     0,
   110,    90,   115,    20,     0,    78,     0,    10,    54,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   125,   124,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   142,   154,     0,    88,    89,     0,
     0,   106,   105,    22,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   154,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   144,    28,     0,    33,     0,    29,    30,     0,    43,
    43,     0,    21,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   139,   169,   170,   172,
   171,   173,     0,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   167,     0,   156,     0,   155,     0,    79,
   140,    84,    85,    86,    87,    92,    93,   118,    83,    82,
    81,     0,    80,   104,   120,   121,    99,   100,    96,    97,
    94,    95,   101,    98,   102,     0,   103,     0,   145,     0,
     0,     0,     0,     0,   123,    43,    41,    44,    41,     0,
     0,    53,    11,     0,     0,     0,     0,     0,     0,    41,
     0,     0,     0,     0,     8,   152,     0,     0,    23,     0,
     0,   116,   148,     0,   154,   154,     0,   151,     0,     0,
     0,    28,    32,    10,    31,     0,     0,    45,    45,    62,
    64,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     9,     0,     0,   147,   168,     0,   143,
   157,     0,     0,     0,    91,   146,    10,     0,     0,    41,
    42,     0,     0,     0,     0,    65,    73,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     7,
   153,    24,   141,   149,   150,   119,     0,     0,   117,    45,
    46,    36,    40,    63,    72,    71,     0,    69,     0,     0,
     0,    74,    75,   158,     0,    60,    55,    56,    26,    10,
     0,    47,    47,    70,    68,    67,     0,     0,     0,     0,
     0,   159,   160,     0,    10,     0,    38,     0,     0,    49,
    48,     0,    66,     0,     0,     0,     0,     0,   161,    61,
    57,    27,    47,    51,    35,     0,    50,    39,     0,     0,
     0,     0,     0,    34,     0,    59,     0,    52,   164,   162,
     0,     0,     0,    10,    37,     0,   163,     0,    58,     0,
     0,   165,     0,   166,     0,     0,     0
};

static const short yydefgoto[] = {   405,
     1,    32,    33,   234,   145,    69,    35,   136,   137,   138,
    36,    37,   258,   217,   293,   359,   360,    70,    38,   308,
   335,    39,    40,    41,    42,    43,    44,    45,    46,    55,
    95,    66,    48,    49,    50,   177,   178,   351,   361,   353,
   175,   163
};

static const short yypact[] = {-32768,
   219,    -4,    17,    17,   -24,   -21,   -25,   609,   -11,   469,
    -5,    16,    21,    17,    23,    33,    35,    36,-32768,     9,
   229,   -26,-32768,-32768,-32768,-32768,  1124,  1124,  1148,  1124,
  1124,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    40,  2611,  2955,-32768,    48,-32768,-32768,-32768,
   -22,    58,-32768,  1124,    53,    55,-32768,-32768,  1124,    61,
-32768,-32768,  2935,-32768,  1261,-32768,  1124,-32768,-32768,   107,
   872,    81,    85,    69,  1124,  1124,    70,  1124,  1124,  1124,
    96,-32768,-32768,  1124,  1124,  1124,  1124,  1124,  1124,  1124,
  1124,  1124,  1124,  1124,-32768,  1124,   105,   183,   183,  1315,
    91,   183,   183,-32768,  1124,  1124,  1124,  1124,  1124,  1124,
   111,  1124,  1124,  1124,  1124,  1124,  1124,    17,    17,  1124,
  1124,  1124,  1124,  1124,  1124,  1124,  1124,  1124,  1124,  1124,
   336,-32768,    58,   113,    99,   106,   110,-32768,  1369,    11,
  1124,  1423,-32768,  1477,   579,   114,   920,  1531,   151,   154,
  1124,  1585,  1639,   175,  1153,  1207,  2611,-32768,-32768,-32768,
-32768,-32768,   125,  2611,  2611,  2611,  2611,  2611,  2611,  2611,
  2611,  2611,  2611,  2611,   -39,  2611,   120,   130,   122,-32768,
-32768,    47,    47,   183,   183,  2929,  2929,   -28,  2806,  2853,
   183,   126,   472,   612,-32768,-32768,   146,   146,  2900,  2900,
  2929,  2929,  2759,  2712,   612,  1693,   612,  1124,  2611,   138,
   141,    96,   139,    58,-32768,  1124,   144,  2611,   144,   469,
   469,-32768,-32768,  1124,   950,  1747,   998,  1124,  1124,  1801,
   145,   148,   165,    18,-32768,-32768,   163,  1124,-32768,  1124,
  1124,  2970,-32768,  1124,  1124,  1124,  1124,-32768,  1124,   -20,
   149,    58,-32768,-32768,-32768,   112,   172,   157,   157,   213,
-32768,  1855,   469,  1909,  1028,  1076,  1963,  2017,  2071,   167,
   197,   197,   166,-32768,   171,  2125,  2611,  2611,  1124,-32768,
  2611,   176,   177,   -38,  2665,-32768,-32768,   185,   695,   144,
-32768,  1124,   187,   189,   469,-32768,-32768,   469,   469,  2179,
   469,  2233,  1100,   469,   469,   186,  1124,   170,   190,-32768,
-32768,-32768,  2611,-32768,-32768,-32768,   744,   188,-32768,   157,
   130,   192,   193,-32768,-32768,-32768,   469,-32768,   469,   469,
  2287,-32768,-32768,     4,    12,  2611,-32768,-32768,-32768,-32768,
   207,    95,    95,-32768,-32768,-32768,   469,   216,   -30,   230,
   206,     4,-32768,  1124,-32768,   793,   209,   211,   210,   103,
    95,   212,-32768,  1124,  1124,  1124,   -29,   217,-32768,  2611,
   143,-32768,    95,-32768,-32768,   218,   103,-32768,  2341,  2395,
   -32,  1124,  1124,-32768,   214,-32768,   220,-32768,-32768,-32768,
   225,  2449,   -31,-32768,-32768,  1124,-32768,   228,   842,  2503,
  1124,-32768,  2557,-32768,   284,   290,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,  -251,     0,  -141,  -125,-32768,    78,
-32768,  -201,  -204,  -122,  -232,  -311,   -68,  -214,-32768,  -261,
-32768,-32768,-32768,-32768,-32768,-32768,   330,-32768,-32768,     6,
   -43,    -1,   266,-32768,-32768,  -110,  -196,-32768,   -35,  -317,
  -243,    84
};


#define	YYLAST		3056


static const short yytable[] = {    47,
    34,   132,   289,   284,   192,   260,   261,   210,    47,    56,
   309,   250,   235,    60,   259,     3,     4,    61,   219,    74,
   233,   241,   241,   365,   382,   270,   294,   348,   241,   241,
   246,   362,    96,    59,   369,   317,   133,    51,    57,   354,
   244,    58,    18,   369,   286,   349,   350,    67,   297,    19,
    62,    63,    22,    71,    52,    24,    25,    26,    53,    27,
    28,   387,    79,   242,   316,   366,   383,   247,    97,    29,
   391,   398,   134,   355,    72,    54,    77,    30,    31,    73,
   324,    75,   273,   325,   326,   320,   328,   341,   356,   332,
   333,    76,   274,   256,    78,   321,   107,   108,   135,     3,
     4,   111,   104,   371,   114,   115,   216,     3,     4,   386,
   -76,   140,   344,   141,   345,   346,   118,   119,   348,    52,
   146,   149,   381,   195,   196,   150,   288,   151,   158,   159,
   160,   161,   363,   154,   282,   283,   349,   350,   162,   393,
   358,   358,   399,    47,   223,    60,   179,     3,     4,     5,
   181,     6,   188,     7,   211,     8,     9,    10,   376,   358,
   212,   385,    11,    12,    13,   213,    14,    15,   307,    16,
   214,   358,   224,   228,    18,   376,   229,   233,   240,   243,
   245,    19,    20,    21,    22,   248,    23,    24,    25,    26,
   244,    27,    28,   105,   106,   107,   108,   251,   280,   252,
   111,    29,   254,   114,   115,   257,    51,   275,   271,    30,
    31,   272,   287,   291,   290,   118,   119,   292,    47,    47,
   295,     2,   307,     3,     4,     5,   306,     6,   310,     7,
   311,     8,     9,    10,   337,   314,   315,   111,    11,    12,
    13,   115,    14,    15,   318,    16,   322,    17,   323,   334,
    18,   340,   118,   119,   338,   342,   343,    19,    20,    21,
    22,    47,    23,    24,    25,    26,   357,    27,    28,   364,
   368,   367,   373,   374,   375,   394,   378,    29,   396,   384,
   388,   401,    80,   406,   395,    30,    31,    47,   223,   407,
    81,   255,   377,    47,   101,   253,    47,    47,   352,    47,
    82,    83,    47,    47,     0,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    47,   223,     0,     0,     0,
     0,     0,     0,     0,    94,    47,     0,    47,    47,     0,
     0,     0,     0,     0,     0,     0,     0,    65,    60,     0,
     3,     4,    61,     0,     0,    47,     0,     0,     0,     0,
     0,     0,     0,     0,    47,   223,    98,    99,   100,   102,
   103,     0,     0,     0,     0,     0,     0,    18,     0,    47,
   223,     0,     0,     0,    19,    62,    63,    22,     0,     0,
    24,    25,    26,   139,    27,    28,     0,     0,   142,     0,
     0,     0,     0,     0,    29,     0,   144,    47,   223,   208,
   148,     0,    30,    31,   152,   153,     0,   155,   156,   157,
     0,     0,     0,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,     0,   176,     0,     0,     0,     0,
     0,     0,     0,     0,   182,   183,   184,   185,   186,   187,
     0,   189,   190,   191,   176,   193,   194,     0,     0,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
   209,     0,     0,     0,     0,     0,     0,     0,     0,   218,
   218,    60,     0,     3,     4,     5,   226,     6,     0,     7,
   230,     8,     9,    10,     0,     0,     0,     0,    11,    12,
    13,     0,    14,    15,     0,    16,     0,     0,     0,     0,
    18,     0,     0,     0,     0,     0,     0,    19,    20,    21,
    22,     0,    23,    24,    25,    26,     0,    27,    28,   105,
   106,   107,   108,   109,   110,     0,   111,    29,   113,   114,
   115,     0,    68,     0,     0,    30,    31,   176,     0,     0,
   117,   118,   119,     0,     0,   218,   120,   121,     0,     0,
     0,     0,     0,   262,   264,     0,   267,   268,   269,   122,
   123,   124,   125,     0,     0,   128,     0,   276,     0,   277,
   278,     0,   130,   281,   176,   176,   174,     0,   285,     0,
     0,    60,     0,     3,     4,     5,     0,     6,     0,     7,
     0,     8,     9,    10,   300,   302,     0,     0,    11,    12,
    13,     0,    14,    15,     0,    16,     0,     0,   313,     0,
    18,    60,     0,     3,     4,    61,     0,    19,    20,    21,
    22,   176,    23,    24,    25,    26,     0,    27,    28,     0,
     0,     0,   331,     0,     0,     0,   336,    29,     0,     0,
    18,     0,     0,   222,     0,    30,    31,    19,    62,    63,
    22,     0,     0,    24,    25,    26,     0,    27,    28,   105,
   106,   107,   108,     0,     0,     0,   111,    29,     0,   114,
   115,    64,     0,     0,     0,    30,    31,     0,     0,     0,
     0,   118,   119,   370,     0,     0,   120,   121,     0,     0,
     0,     0,     0,   379,   380,   174,     0,    60,     0,     3,
     4,     5,     0,     6,     0,     7,     0,     8,     9,    10,
     0,   392,   174,     0,    11,    12,    13,     0,    14,    15,
     0,    16,     0,     0,     0,   400,    18,     0,     0,     0,
   403,     0,     0,    19,    20,    21,    22,     0,    23,    24,
    25,    26,     0,    27,    28,     0,    60,     0,     3,     4,
     5,     0,     6,    29,     7,     0,     8,     9,    10,   319,
     0,    30,    31,    11,    12,    13,     0,    14,    15,     0,
    16,     0,     0,     0,     0,    18,     0,     0,     0,     0,
     0,     0,    19,    20,    21,    22,     0,    23,    24,    25,
    26,     0,    27,    28,     0,    60,     0,     3,     4,     5,
     0,     6,    29,     7,     0,     8,     9,    10,   339,     0,
    30,    31,    11,    12,    13,     0,    14,    15,     0,    16,
     0,     0,     0,     0,    18,     0,     0,     0,     0,     0,
     0,    19,    20,    21,    22,     0,    23,    24,    25,    26,
     0,    27,    28,     0,    60,     0,     3,     4,     5,     0,
     6,    29,     7,     0,     8,     9,    10,   372,     0,    30,
    31,    11,    12,    13,     0,    14,    15,     0,    16,     0,
     0,     0,     0,    18,    60,     0,     3,     4,    61,     0,
    19,    20,    21,    22,     0,    23,    24,    25,    26,     0,
    27,    28,     0,     0,     0,     0,     0,     0,     0,     0,
    29,     0,     0,    18,     0,     0,     0,     0,    30,    31,
    19,    62,    63,    22,     0,     0,    24,    25,    26,     0,
    27,    28,    60,     0,     3,     4,    61,     0,     0,     0,
    29,     0,     0,     0,   147,     0,     0,     0,    30,    31,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    18,    60,     0,     3,     4,    61,     0,    19,    62,
    63,    22,     0,     0,    24,    25,    26,     0,    27,    28,
     0,     0,     0,     0,     0,     0,     0,     0,    29,     0,
     0,    18,   225,     0,     0,     0,    30,    31,    19,    62,
    63,    22,     0,     0,    24,    25,    26,     0,    27,    28,
    60,     0,     3,     4,    61,     0,     0,     0,    29,   263,
     0,     0,     0,     0,     0,     0,    30,    31,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
    60,     0,     3,     4,    61,     0,    19,    62,    63,    22,
     0,     0,    24,    25,    26,     0,    27,    28,     0,     0,
     0,     0,     0,     0,     0,     0,    29,     0,     0,    18,
   266,     0,     0,     0,    30,    31,    19,    62,    63,    22,
     0,     0,    24,    25,    26,     0,    27,    28,    60,     0,
     3,     4,    61,     0,     0,     0,    29,   299,     0,     0,
     0,     0,     0,     0,    30,    31,     0,     0,     0,     0,
     0,     0,    60,     0,     3,     4,    61,    18,     0,     0,
     0,     0,     0,     0,    19,    62,    63,    22,     0,     0,
    24,    25,    26,     0,    27,    28,    60,     0,     3,     4,
    61,    18,     0,     0,    29,   301,     0,     0,    19,    62,
    63,    22,    30,    31,    24,    25,    26,     0,    27,    28,
    60,     0,     3,     4,    61,    18,     0,     0,    29,   330,
     0,     0,    19,    62,    63,    22,    30,    31,    24,    25,
    26,     0,    27,    28,     0,     0,     0,     0,     0,    18,
     0,     0,    29,     0,     0,     0,    19,    62,    21,    22,
    30,    31,    24,    25,    26,     0,    27,    28,     0,     0,
   105,   106,   107,   108,   109,   110,    29,   111,   112,   113,
   114,   115,   236,   237,    30,    31,     0,     0,   116,     0,
     0,   117,   118,   119,     0,     0,     0,   120,   121,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   122,   123,   124,   125,   126,   127,   128,     0,     0,     0,
     0,     0,   129,   130,   105,   106,   107,   108,   109,   110,
     0,   111,   112,   113,   114,   115,     0,   238,     0,   239,
     0,     0,   116,     0,     0,   117,   118,   119,     0,     0,
     0,   120,   121,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
   128,     0,     0,     0,     0,     0,   129,   130,   105,   106,
   107,   108,   109,   110,     0,   111,   112,   113,   114,   115,
     0,     0,     0,   143,     0,     0,   116,     0,     0,   117,
   118,   119,     0,     0,     0,   120,   121,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
   124,   125,   126,   127,   128,     0,     0,     0,     0,     0,
   129,   130,   105,   106,   107,   108,   109,   110,     0,   111,
   112,   113,   114,   115,   180,     0,     0,     0,     0,     0,
   116,     0,     0,   117,   118,   119,     0,     0,     0,   120,
   121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   122,   123,   124,   125,   126,   127,   128,     0,
     0,     0,     0,     0,   129,   130,   105,   106,   107,   108,
   109,   110,     0,   111,   112,   113,   114,   115,   215,     0,
     0,     0,     0,     0,   116,     0,     0,   117,   118,   119,
     0,     0,     0,   120,   121,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
   126,   127,   128,     0,     0,     0,     0,     0,   129,   130,
   105,   106,   107,   108,   109,   110,     0,   111,   112,   113,
   114,   115,   220,     0,     0,     0,     0,     0,   116,     0,
     0,   117,   118,   119,     0,     0,     0,   120,   121,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   122,   123,   124,   125,   126,   127,   128,     0,     0,     0,
     0,     0,   129,   130,   105,   106,   107,   108,   109,   110,
     0,   111,   112,   113,   114,   115,   221,     0,     0,     0,
     0,     0,   116,     0,     0,   117,   118,   119,     0,     0,
     0,   120,   121,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
   128,     0,     0,     0,     0,     0,   129,   130,   105,   106,
   107,   108,   109,   110,     0,   111,   112,   113,   114,   115,
     0,     0,     0,   227,     0,     0,   116,     0,     0,   117,
   118,   119,     0,     0,     0,   120,   121,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
   124,   125,   126,   127,   128,     0,     0,     0,     0,     0,
   129,   130,   105,   106,   107,   108,   109,   110,     0,   111,
   112,   113,   114,   115,   231,     0,     0,     0,     0,     0,
   116,     0,     0,   117,   118,   119,     0,     0,     0,   120,
   121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   122,   123,   124,   125,   126,   127,   128,     0,
     0,     0,     0,     0,   129,   130,   105,   106,   107,   108,
   109,   110,     0,   111,   112,   113,   114,   115,   232,     0,
     0,     0,     0,     0,   116,     0,     0,   117,   118,   119,
     0,     0,     0,   120,   121,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
   126,   127,   128,     0,     0,     0,     0,     0,   129,   130,
   105,   106,   107,   108,   109,   110,     0,   111,   112,   113,
   114,   115,     0,     0,   249,     0,     0,     0,   116,     0,
     0,   117,   118,   119,     0,     0,     0,   120,   121,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   122,   123,   124,   125,   126,   127,   128,     0,     0,     0,
     0,     0,   129,   130,   105,   106,   107,   108,   109,   110,
     0,   111,   112,   113,   114,   115,     0,     0,     0,   265,
     0,     0,   116,     0,     0,   117,   118,   119,     0,     0,
     0,   120,   121,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
   128,     0,     0,     0,     0,     0,   129,   130,   105,   106,
   107,   108,   109,   110,     0,   111,   112,   113,   114,   115,
     0,     0,   257,     0,     0,     0,   116,     0,     0,   117,
   118,   119,     0,     0,     0,   120,   121,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
   124,   125,   126,   127,   128,     0,     0,     0,     0,     0,
   129,   130,   105,   106,   107,   108,   109,   110,     0,   111,
   112,   113,   114,   115,   296,     0,     0,     0,     0,     0,
   116,     0,     0,   117,   118,   119,     0,     0,     0,   120,
   121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   122,   123,   124,   125,   126,   127,   128,     0,
     0,     0,     0,     0,   129,   130,   105,   106,   107,   108,
   109,   110,     0,   111,   112,   113,   114,   115,   298,     0,
     0,     0,     0,     0,   116,     0,     0,   117,   118,   119,
     0,     0,     0,   120,   121,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
   126,   127,   128,     0,     0,     0,     0,     0,   129,   130,
   105,   106,   107,   108,   109,   110,     0,   111,   112,   113,
   114,   115,     0,     0,     0,   303,     0,     0,   116,     0,
     0,   117,   118,   119,     0,     0,     0,   120,   121,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   122,   123,   124,   125,   126,   127,   128,     0,     0,     0,
     0,     0,   129,   130,   105,   106,   107,   108,   109,   110,
     0,   111,   112,   113,   114,   115,   304,     0,     0,     0,
     0,     0,   116,     0,     0,   117,   118,   119,     0,     0,
     0,   120,   121,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
   128,     0,     0,     0,     0,     0,   129,   130,   105,   106,
   107,   108,   109,   110,     0,   111,   112,   113,   114,   115,
   305,     0,     0,     0,     0,     0,   116,     0,     0,   117,
   118,   119,     0,     0,     0,   120,   121,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
   124,   125,   126,   127,   128,     0,     0,     0,     0,     0,
   129,   130,   105,   106,   107,   108,   109,   110,     0,   111,
   112,   113,   114,   115,     0,     0,     0,   312,     0,     0,
   116,     0,     0,   117,   118,   119,     0,     0,     0,   120,
   121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   122,   123,   124,   125,   126,   127,   128,     0,
     0,     0,     0,     0,   129,   130,   105,   106,   107,   108,
   109,   110,     0,   111,   112,   113,   114,   115,   327,     0,
     0,     0,     0,     0,   116,     0,     0,   117,   118,   119,
     0,     0,     0,   120,   121,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
   126,   127,   128,     0,     0,     0,     0,     0,   129,   130,
   105,   106,   107,   108,   109,   110,     0,   111,   112,   113,
   114,   115,   329,     0,     0,     0,     0,     0,   116,     0,
     0,   117,   118,   119,     0,     0,     0,   120,   121,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   122,   123,   124,   125,   126,   127,   128,     0,     0,     0,
     0,     0,   129,   130,   105,   106,   107,   108,   109,   110,
     0,   111,   112,   113,   114,   115,   347,     0,     0,     0,
     0,     0,   116,     0,     0,   117,   118,   119,     0,     0,
     0,   120,   121,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
   128,     0,     0,     0,     0,     0,   129,   130,   105,   106,
   107,   108,   109,   110,     0,   111,   112,   113,   114,   115,
     0,     0,     0,   389,     0,     0,   116,     0,     0,   117,
   118,   119,     0,     0,     0,   120,   121,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
   124,   125,   126,   127,   128,     0,     0,     0,     0,     0,
   129,   130,   105,   106,   107,   108,   109,   110,     0,   111,
   112,   113,   114,   115,     0,     0,     0,   390,     0,     0,
   116,     0,     0,   117,   118,   119,     0,     0,     0,   120,
   121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   122,   123,   124,   125,   126,   127,   128,     0,
     0,     0,     0,     0,   129,   130,   105,   106,   107,   108,
   109,   110,     0,   111,   112,   113,   114,   115,     0,     0,
     0,   397,     0,     0,   116,     0,     0,   117,   118,   119,
     0,     0,     0,   120,   121,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
   126,   127,   128,     0,     0,     0,     0,     0,   129,   130,
   105,   106,   107,   108,   109,   110,     0,   111,   112,   113,
   114,   115,     0,     0,     0,   402,     0,     0,   116,     0,
     0,   117,   118,   119,     0,     0,     0,   120,   121,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   122,   123,   124,   125,   126,   127,   128,     0,     0,     0,
     0,     0,   129,   130,   105,   106,   107,   108,   109,   110,
     0,   111,   112,   113,   114,   115,     0,     0,     0,   404,
     0,     0,   116,     0,     0,   117,   118,   119,     0,     0,
     0,   120,   121,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   122,   123,   124,   125,   126,   127,
   128,     0,     0,     0,     0,     0,   129,   130,   105,   106,
   107,   108,   109,   110,     0,   111,   112,   113,   114,   115,
     0,     0,     0,     0,     0,     0,   116,     0,     0,   117,
   118,   119,     0,     0,     0,   120,   121,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,   123,
   124,   125,   126,   127,   128,     0,     0,     0,     0,     0,
   129,   130,   105,   106,   107,   108,   109,   110,     0,   111,
   112,   113,   114,   115,     0,     0,     0,     0,     0,     0,
   116,     0,     0,   117,   118,   119,     0,     0,     0,   120,
   121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   122,   123,   124,   125,   126,   127,   128,   105,
   106,   107,   108,   109,   110,   130,   111,   112,   113,   114,
   115,     0,     0,     0,     0,     0,     0,   116,     0,     0,
   117,   118,   119,     0,     0,     0,   120,   121,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   122,
   123,   124,   125,   126,     0,   128,   105,   106,   107,   108,
   109,   110,   130,   111,   112,   113,   114,   115,     0,     0,
     0,     0,     0,     0,   116,     0,     0,   117,   118,   119,
     0,     0,     0,   120,   121,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   122,   123,   124,   125,
     0,     0,   128,   105,   106,   107,   108,   109,   110,   130,
   111,     0,   113,   114,   115,     0,     0,     0,     0,     0,
     0,   116,     0,     0,   117,   118,   119,     0,     0,     0,
   120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   122,   123,   124,   125,     0,     0,   128,
   105,   106,   107,   108,   109,   110,   130,   111,     0,     0,
   114,   115,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   117,   118,   119,     0,     0,     0,   120,   121,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   122,   123,   124,   125,     0,     0,   128,   105,   106,   107,
   108,   109,   110,   130,   111,     0,     0,   114,   115,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   117,   118,
   119,     0,     0,     0,   120,   121,   105,   106,   107,   108,
     0,     0,     0,   111,     0,     0,   114,   115,    80,   124,
   125,     0,     0,   128,     0,     0,     0,   117,   118,   119,
   130,     0,     0,   120,   121,     0,    82,    83,   131,     0,
     0,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,     0,   128,   279,     0,     0,    82,    83,     0,   130,
    94,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    82,    83,     0,     0,     0,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93
};

static const short yycheck[] = {     1,
     1,    45,   254,   247,   115,   220,   221,   133,    10,     4,
   272,   208,   154,     3,   219,     5,     6,     7,   141,    14,
     3,    61,    61,    54,    54,   230,   259,    24,    61,    61,
    59,   343,    59,    59,   352,   287,    59,    42,    63,    28,
    61,    63,    32,   361,    65,    42,    43,    59,   263,    39,
    40,    41,    42,    59,    59,    45,    46,    47,    42,    49,
    50,   373,    54,   103,   103,    96,    96,    96,    95,    59,
   103,   103,    95,    62,    59,    59,    42,    67,    68,    59,
   295,    59,    65,   298,   299,   290,   301,   320,   340,   304,
   305,    59,   234,   216,    59,   292,    50,    51,    41,     5,
     6,    55,    63,   355,    58,    59,    96,     5,     6,   371,
    63,    59,   327,    59,   329,   330,    70,    71,    24,    59,
    14,    41,   366,   118,   119,    41,   252,    59,    33,    34,
    35,    36,   347,    64,   245,   246,    42,    43,    43,   383,
   342,   343,   394,   145,   145,     3,    42,     5,     6,     7,
    60,     9,    42,    11,    42,    13,    14,    15,   360,   361,
    62,    19,    20,    21,    22,    60,    24,    25,    26,    27,
    61,   373,    59,    23,    32,   377,    23,     3,    54,    60,
    59,    39,    40,    41,    42,    60,    44,    45,    46,    47,
    61,    49,    50,    48,    49,    50,    51,    60,   242,    59,
    55,    59,    64,    58,    59,    62,    42,    45,    64,    67,
    68,    64,    64,    42,   103,    70,    71,    61,   220,   221,
     8,     3,    26,     5,     6,     7,    60,     9,    63,    11,
    60,    13,    14,    15,    65,    60,    60,    55,    20,    21,
    22,    59,    24,    25,    60,    27,    60,    29,    60,    64,
    32,    64,    70,    71,    65,    64,    64,    39,    40,    41,
    42,   263,    44,    45,    46,    47,    60,    49,    50,    54,
    65,    42,    64,    63,    65,    62,    65,    59,    54,    63,
    63,    54,    54,     0,    65,    67,    68,   289,   289,     0,
    62,   214,   361,   295,    29,   212,   298,   299,   334,   301,
    72,    73,   304,   305,    -1,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,   317,   317,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    96,   327,    -1,   329,   330,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,     3,    -1,
     5,     6,     7,    -1,    -1,   347,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   356,   356,    27,    28,    29,    30,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,   371,
   371,    -1,    -1,    -1,    39,    40,    41,    42,    -1,    -1,
    45,    46,    47,    54,    49,    50,    -1,    -1,    59,    -1,
    -1,    -1,    -1,    -1,    59,    -1,    67,   399,   399,    64,
    71,    -1,    67,    68,    75,    76,    -1,    78,    79,    80,
    -1,    -1,    -1,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    -1,    96,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
    -1,   112,   113,   114,   115,   116,   117,    -1,    -1,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   140,
   141,     3,    -1,     5,     6,     7,   147,     9,    -1,    11,
   151,    13,    14,    15,    -1,    -1,    -1,    -1,    20,    21,
    22,    -1,    24,    25,    -1,    27,    -1,    -1,    -1,    -1,
    32,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    41,
    42,    -1,    44,    45,    46,    47,    -1,    49,    50,    48,
    49,    50,    51,    52,    53,    -1,    55,    59,    57,    58,
    59,    -1,    64,    -1,    -1,    67,    68,   208,    -1,    -1,
    69,    70,    71,    -1,    -1,   216,    75,    76,    -1,    -1,
    -1,    -1,    -1,   224,   225,    -1,   227,   228,   229,    88,
    89,    90,    91,    -1,    -1,    94,    -1,   238,    -1,   240,
   241,    -1,   101,   244,   245,   246,   247,    -1,   249,    -1,
    -1,     3,    -1,     5,     6,     7,    -1,     9,    -1,    11,
    -1,    13,    14,    15,   265,   266,    -1,    -1,    20,    21,
    22,    -1,    24,    25,    -1,    27,    -1,    -1,   279,    -1,
    32,     3,    -1,     5,     6,     7,    -1,    39,    40,    41,
    42,   292,    44,    45,    46,    47,    -1,    49,    50,    -1,
    -1,    -1,   303,    -1,    -1,    -1,   307,    59,    -1,    -1,
    32,    -1,    -1,    65,    -1,    67,    68,    39,    40,    41,
    42,    -1,    -1,    45,    46,    47,    -1,    49,    50,    48,
    49,    50,    51,    -1,    -1,    -1,    55,    59,    -1,    58,
    59,    63,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
    -1,    70,    71,   354,    -1,    -1,    75,    76,    -1,    -1,
    -1,    -1,    -1,   364,   365,   366,    -1,     3,    -1,     5,
     6,     7,    -1,     9,    -1,    11,    -1,    13,    14,    15,
    -1,   382,   383,    -1,    20,    21,    22,    -1,    24,    25,
    -1,    27,    -1,    -1,    -1,   396,    32,    -1,    -1,    -1,
   401,    -1,    -1,    39,    40,    41,    42,    -1,    44,    45,
    46,    47,    -1,    49,    50,    -1,     3,    -1,     5,     6,
     7,    -1,     9,    59,    11,    -1,    13,    14,    15,    65,
    -1,    67,    68,    20,    21,    22,    -1,    24,    25,    -1,
    27,    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,
    -1,    -1,    39,    40,    41,    42,    -1,    44,    45,    46,
    47,    -1,    49,    50,    -1,     3,    -1,     5,     6,     7,
    -1,     9,    59,    11,    -1,    13,    14,    15,    65,    -1,
    67,    68,    20,    21,    22,    -1,    24,    25,    -1,    27,
    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    39,    40,    41,    42,    -1,    44,    45,    46,    47,
    -1,    49,    50,    -1,     3,    -1,     5,     6,     7,    -1,
     9,    59,    11,    -1,    13,    14,    15,    65,    -1,    67,
    68,    20,    21,    22,    -1,    24,    25,    -1,    27,    -1,
    -1,    -1,    -1,    32,     3,    -1,     5,     6,     7,    -1,
    39,    40,    41,    42,    -1,    44,    45,    46,    47,    -1,
    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    59,    -1,    -1,    32,    -1,    -1,    -1,    -1,    67,    68,
    39,    40,    41,    42,    -1,    -1,    45,    46,    47,    -1,
    49,    50,     3,    -1,     5,     6,     7,    -1,    -1,    -1,
    59,    -1,    -1,    -1,    63,    -1,    -1,    -1,    67,    68,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    32,     3,    -1,     5,     6,     7,    -1,    39,    40,
    41,    42,    -1,    -1,    45,    46,    47,    -1,    49,    50,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,
    -1,    32,    63,    -1,    -1,    -1,    67,    68,    39,    40,
    41,    42,    -1,    -1,    45,    46,    47,    -1,    49,    50,
     3,    -1,     5,     6,     7,    -1,    -1,    -1,    59,    60,
    -1,    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    32,
     3,    -1,     5,     6,     7,    -1,    39,    40,    41,    42,
    -1,    -1,    45,    46,    47,    -1,    49,    50,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    32,
    63,    -1,    -1,    -1,    67,    68,    39,    40,    41,    42,
    -1,    -1,    45,    46,    47,    -1,    49,    50,     3,    -1,
     5,     6,     7,    -1,    -1,    -1,    59,    60,    -1,    -1,
    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
    -1,    -1,     3,    -1,     5,     6,     7,    32,    -1,    -1,
    -1,    -1,    -1,    -1,    39,    40,    41,    42,    -1,    -1,
    45,    46,    47,    -1,    49,    50,     3,    -1,     5,     6,
     7,    32,    -1,    -1,    59,    60,    -1,    -1,    39,    40,
    41,    42,    67,    68,    45,    46,    47,    -1,    49,    50,
     3,    -1,     5,     6,     7,    32,    -1,    -1,    59,    60,
    -1,    -1,    39,    40,    41,    42,    67,    68,    45,    46,
    47,    -1,    49,    50,    -1,    -1,    -1,    -1,    -1,    32,
    -1,    -1,    59,    -1,    -1,    -1,    39,    40,    41,    42,
    67,    68,    45,    46,    47,    -1,    49,    50,    -1,    -1,
    48,    49,    50,    51,    52,    53,    59,    55,    56,    57,
    58,    59,    60,    61,    67,    68,    -1,    -1,    66,    -1,
    -1,    69,    70,    71,    -1,    -1,    -1,    75,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    89,    90,    91,    92,    93,    94,    -1,    -1,    -1,
    -1,    -1,   100,   101,    48,    49,    50,    51,    52,    53,
    -1,    55,    56,    57,    58,    59,    -1,    61,    -1,    63,
    -1,    -1,    66,    -1,    -1,    69,    70,    71,    -1,    -1,
    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    90,    91,    92,    93,
    94,    -1,    -1,    -1,    -1,    -1,   100,   101,    48,    49,
    50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
    -1,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    69,
    70,    71,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,
    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,
   100,   101,    48,    49,    50,    51,    52,    53,    -1,    55,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
    66,    -1,    -1,    69,    70,    71,    -1,    -1,    -1,    75,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    88,    89,    90,    91,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,   100,   101,    48,    49,    50,    51,
    52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    66,    -1,    -1,    69,    70,    71,
    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    90,    91,
    92,    93,    94,    -1,    -1,    -1,    -1,    -1,   100,   101,
    48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,
    -1,    69,    70,    71,    -1,    -1,    -1,    75,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    89,    90,    91,    92,    93,    94,    -1,    -1,    -1,
    -1,    -1,   100,   101,    48,    49,    50,    51,    52,    53,
    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    -1,    -1,    66,    -1,    -1,    69,    70,    71,    -1,    -1,
    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    90,    91,    92,    93,
    94,    -1,    -1,    -1,    -1,    -1,   100,   101,    48,    49,
    50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
    -1,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    69,
    70,    71,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,
    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,
   100,   101,    48,    49,    50,    51,    52,    53,    -1,    55,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
    66,    -1,    -1,    69,    70,    71,    -1,    -1,    -1,    75,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    88,    89,    90,    91,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,   100,   101,    48,    49,    50,    51,
    52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    66,    -1,    -1,    69,    70,    71,
    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    90,    91,
    92,    93,    94,    -1,    -1,    -1,    -1,    -1,   100,   101,
    48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
    58,    59,    -1,    -1,    62,    -1,    -1,    -1,    66,    -1,
    -1,    69,    70,    71,    -1,    -1,    -1,    75,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    89,    90,    91,    92,    93,    94,    -1,    -1,    -1,
    -1,    -1,   100,   101,    48,    49,    50,    51,    52,    53,
    -1,    55,    56,    57,    58,    59,    -1,    -1,    -1,    63,
    -1,    -1,    66,    -1,    -1,    69,    70,    71,    -1,    -1,
    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    90,    91,    92,    93,
    94,    -1,    -1,    -1,    -1,    -1,   100,   101,    48,    49,
    50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
    -1,    -1,    62,    -1,    -1,    -1,    66,    -1,    -1,    69,
    70,    71,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,
    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,
   100,   101,    48,    49,    50,    51,    52,    53,    -1,    55,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
    66,    -1,    -1,    69,    70,    71,    -1,    -1,    -1,    75,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    88,    89,    90,    91,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,   100,   101,    48,    49,    50,    51,
    52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    66,    -1,    -1,    69,    70,    71,
    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    90,    91,
    92,    93,    94,    -1,    -1,    -1,    -1,    -1,   100,   101,
    48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
    58,    59,    -1,    -1,    -1,    63,    -1,    -1,    66,    -1,
    -1,    69,    70,    71,    -1,    -1,    -1,    75,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    89,    90,    91,    92,    93,    94,    -1,    -1,    -1,
    -1,    -1,   100,   101,    48,    49,    50,    51,    52,    53,
    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    -1,    -1,    66,    -1,    -1,    69,    70,    71,    -1,    -1,
    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    90,    91,    92,    93,
    94,    -1,    -1,    -1,    -1,    -1,   100,   101,    48,    49,
    50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    69,
    70,    71,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,
    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,
   100,   101,    48,    49,    50,    51,    52,    53,    -1,    55,
    56,    57,    58,    59,    -1,    -1,    -1,    63,    -1,    -1,
    66,    -1,    -1,    69,    70,    71,    -1,    -1,    -1,    75,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    88,    89,    90,    91,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,   100,   101,    48,    49,    50,    51,
    52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    -1,    66,    -1,    -1,    69,    70,    71,
    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    90,    91,
    92,    93,    94,    -1,    -1,    -1,    -1,    -1,   100,   101,
    48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,    -1,
    -1,    69,    70,    71,    -1,    -1,    -1,    75,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    89,    90,    91,    92,    93,    94,    -1,    -1,    -1,
    -1,    -1,   100,   101,    48,    49,    50,    51,    52,    53,
    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    -1,    -1,    66,    -1,    -1,    69,    70,    71,    -1,    -1,
    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    90,    91,    92,    93,
    94,    -1,    -1,    -1,    -1,    -1,   100,   101,    48,    49,
    50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
    -1,    -1,    -1,    63,    -1,    -1,    66,    -1,    -1,    69,
    70,    71,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,
    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,
   100,   101,    48,    49,    50,    51,    52,    53,    -1,    55,
    56,    57,    58,    59,    -1,    -1,    -1,    63,    -1,    -1,
    66,    -1,    -1,    69,    70,    71,    -1,    -1,    -1,    75,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    88,    89,    90,    91,    92,    93,    94,    -1,
    -1,    -1,    -1,    -1,   100,   101,    48,    49,    50,    51,
    52,    53,    -1,    55,    56,    57,    58,    59,    -1,    -1,
    -1,    63,    -1,    -1,    66,    -1,    -1,    69,    70,    71,
    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    90,    91,
    92,    93,    94,    -1,    -1,    -1,    -1,    -1,   100,   101,
    48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
    58,    59,    -1,    -1,    -1,    63,    -1,    -1,    66,    -1,
    -1,    69,    70,    71,    -1,    -1,    -1,    75,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    89,    90,    91,    92,    93,    94,    -1,    -1,    -1,
    -1,    -1,   100,   101,    48,    49,    50,    51,    52,    53,
    -1,    55,    56,    57,    58,    59,    -1,    -1,    -1,    63,
    -1,    -1,    66,    -1,    -1,    69,    70,    71,    -1,    -1,
    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    90,    91,    92,    93,
    94,    -1,    -1,    -1,    -1,    -1,   100,   101,    48,    49,
    50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,    69,
    70,    71,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,
    90,    91,    92,    93,    94,    -1,    -1,    -1,    -1,    -1,
   100,   101,    48,    49,    50,    51,    52,    53,    -1,    55,
    56,    57,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
    66,    -1,    -1,    69,    70,    71,    -1,    -1,    -1,    75,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    88,    89,    90,    91,    92,    93,    94,    48,
    49,    50,    51,    52,    53,   101,    55,    56,    57,    58,
    59,    -1,    -1,    -1,    -1,    -1,    -1,    66,    -1,    -1,
    69,    70,    71,    -1,    -1,    -1,    75,    76,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
    89,    90,    91,    92,    -1,    94,    48,    49,    50,    51,
    52,    53,   101,    55,    56,    57,    58,    59,    -1,    -1,
    -1,    -1,    -1,    -1,    66,    -1,    -1,    69,    70,    71,
    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    90,    91,
    -1,    -1,    94,    48,    49,    50,    51,    52,    53,   101,
    55,    -1,    57,    58,    59,    -1,    -1,    -1,    -1,    -1,
    -1,    66,    -1,    -1,    69,    70,    71,    -1,    -1,    -1,
    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    88,    89,    90,    91,    -1,    -1,    94,
    48,    49,    50,    51,    52,    53,   101,    55,    -1,    -1,
    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    69,    70,    71,    -1,    -1,    -1,    75,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    89,    90,    91,    -1,    -1,    94,    48,    49,    50,
    51,    52,    53,   101,    55,    -1,    -1,    58,    59,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,
    71,    -1,    -1,    -1,    75,    76,    48,    49,    50,    51,
    -1,    -1,    -1,    55,    -1,    -1,    58,    59,    54,    90,
    91,    -1,    -1,    94,    -1,    -1,    -1,    69,    70,    71,
   101,    -1,    -1,    75,    76,    -1,    72,    73,    54,    -1,
    -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    -1,    94,    54,    -1,    -1,    72,    73,    -1,   101,
    96,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 169 "cmdgram.y"
{ ;
    break;}
case 2:
#line 174 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 3:
#line 176 "cmdgram.y"
{ if(!gStatementList) { gStatementList = yyvsp[0].stmt; } else { gStatementList->append(yyvsp[0].stmt); } ;
    break;}
case 4:
#line 181 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 5:
#line 183 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 6:
#line 185 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 7:
#line 190 "cmdgram.y"
{ yyval.stmt = yyvsp[-2].stmt; for(StmtNode *walk = (yyvsp[-2].stmt);walk;walk = walk->getNext() ) walk->setPackage(yyvsp[-4].s.value); ;
    break;}
case 8:
#line 195 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 9:
#line 197 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; (yyvsp[-1].stmt)->append(yyvsp[0].stmt);  ;
    break;}
case 10:
#line 202 "cmdgram.y"
{ yyval.stmt = nil; ;
    break;}
case 11:
#line 204 "cmdgram.y"
{ if(!yyvsp[-1].stmt) { yyval.stmt = yyvsp[0].stmt; } else { (yyvsp[-1].stmt)->append(yyvsp[0].stmt); yyval.stmt = yyvsp[-1].stmt; } ;
    break;}
case 18:
#line 215 "cmdgram.y"
{ yyval.stmt = BreakStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 19:
#line 217 "cmdgram.y"
{ yyval.stmt = ContinueStmtNode::alloc( yyvsp[-1].i.lineNumber ); ;
    break;}
case 20:
#line 219 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-1].i.lineNumber, NULL ); ;
    break;}
case 21:
#line 221 "cmdgram.y"
{ yyval.stmt = ReturnStmtNode::alloc( yyvsp[-2].i.lineNumber, yyvsp[-1].expr ); ;
    break;}
case 22:
#line 223 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 23:
#line 225 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr, NULL ); ;
    break;}
case 24:
#line 227 "cmdgram.y"
{ yyval.stmt = TTagSetStmtNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[-1].expr ); ;
    break;}
case 25:
#line 229 "cmdgram.y"
{ yyval.stmt = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false, true ); ;
    break;}
case 26:
#line 234 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-7].i.lineNumber, yyvsp[-6].s.value, NULL, yyvsp[-4].param, yyvsp[-1].stmt ); ;
    break;}
case 27:
#line 236 "cmdgram.y"
{ yyval.stmt = FunctionDeclStmtNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-6].s.value, yyvsp[-8].s.value, yyvsp[-4].param, yyvsp[-1].stmt ); ;
    break;}
case 28:
#line 241 "cmdgram.y"
{ yyval.param = NULL; ;
    break;}
case 29:
#line 243 "cmdgram.y"
{ yyval.param = yyvsp[0].param; ;
    break;}
case 30:
#line 248 "cmdgram.y"
{ yyval.param = yyvsp[0].param; ;
    break;}
case 31:
#line 250 "cmdgram.y"
{ yyval.param = yyvsp[-2].param; ((StmtNode*)(yyvsp[-2].param))->append(yyvsp[0].param); ;
    break;}
case 32:
#line 255 "cmdgram.y"
{ yyval.param = ParamNode::alloc( yyvsp[-2].s.lineNumber, yyvsp[-2].s.value, yyvsp[0].typeNode ); ;
    break;}
case 33:
#line 257 "cmdgram.y"
{ yyval.param = ParamNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, TypeNode::alloc(yyvsp[0].s.lineNumber, rwSTRING, true)); ;
    break;}
case 34:
#line 262 "cmdgram.y"
{ yyval.stmt = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, NULL, yyvsp[-5].s.value, yyvsp[-2].slist, NULL, true, false, false); ;
    break;}
case 35:
#line 267 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, false); ;
    break;}
case 36:
#line 269 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, false); ;
    break;}
case 37:
#line 271 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-11].i.lineNumber, yyvsp[-10].expr, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, true, false); ;
    break;}
case 38:
#line 273 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-8].i.lineNumber, yyvsp[-7].expr, yyvsp[-4].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, true, false); ;
    break;}
case 39:
#line 275 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-9].i.lineNumber, yyvsp[-8].expr, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-5].s.value, yyvsp[-1].odcl.slots, yyvsp[-1].odcl.decls, false, false, true); ;
    break;}
case 40:
#line 277 "cmdgram.y"
{ yyval.od = ObjectDeclNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, yyvsp[-1].expr, yyvsp[-2].s.value, NULL, NULL, false, false, true); ;
    break;}
case 41:
#line 282 "cmdgram.y"
{ yyval.s.value = NULL; ;
    break;}
case 42:
#line 284 "cmdgram.y"
{ yyval.s = yyvsp[0].s; ;
    break;}
case 43:
#line 289 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( CodeBlock::smCurrentParser->getCurrentLine(), "", false); ;
    break;}
case 44:
#line 291 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 45:
#line 296 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 46:
#line 298 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 47:
#line 303 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = NULL; ;
    break;}
case 48:
#line 305 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[0].slist; yyval.odcl.decls = NULL; ;
    break;}
case 49:
#line 307 "cmdgram.y"
{ yyval.odcl.slots = NULL; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 50:
#line 309 "cmdgram.y"
{ yyval.odcl.slots = yyvsp[-1].slist; yyval.odcl.decls = yyvsp[0].od; ;
    break;}
case 51:
#line 314 "cmdgram.y"
{ yyval.od = yyvsp[-1].od; ;
    break;}
case 52:
#line 316 "cmdgram.y"
{ yyvsp[-2].od->append(yyvsp[-1].od); yyval.od = yyvsp[-2].od; ;
    break;}
case 53:
#line 321 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].stmt; ;
    break;}
case 54:
#line 323 "cmdgram.y"
{ yyval.stmt = yyvsp[0].stmt; ;
    break;}
case 55:
#line 328 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, false); ;
    break;}
case 56:
#line 330 "cmdgram.y"
{ yyval.stmt = yyvsp[-1].ifnode; yyvsp[-1].ifnode->propagateSwitchExpr(yyvsp[-4].expr, true); ;
    break;}
case 57:
#line 335 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 58:
#line 337 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].stmt, yyvsp[0].stmt, false); ;
    break;}
case 59:
#line 339 "cmdgram.y"
{ yyval.ifnode = IfStmtNode::alloc( yyvsp[-4].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].stmt, yyvsp[0].ifnode, true); ;
    break;}
case 60:
#line 344 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr;;
    break;}
case 61:
#line 346 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr=yyvsp[-2].expr; ;
    break;}
case 62:
#line 351 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-4].i.lineNumber, yyvsp[-2].expr, yyvsp[0].stmt, NULL, false); ;
    break;}
case 63:
#line 353 "cmdgram.y"
{ yyval.stmt = IfStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, yyvsp[-2].stmt, yyvsp[0].stmt, false); ;
    break;}
case 64:
#line 358 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-4].i.lineNumber, nil, yyvsp[-2].expr, nil, yyvsp[0].stmt, false); ;
    break;}
case 65:
#line 360 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-3].i.lineNumber, nil, yyvsp[-1].expr, nil, yyvsp[-4].stmt, true); ;
    break;}
case 66:
#line 365 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-8].i.lineNumber, yyvsp[-6].expr, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 67:
#line 367 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 68:
#line 369 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, yyvsp[-5].expr, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 69:
#line 371 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, yyvsp[-4].expr, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 70:
#line 373 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 71:
#line 375 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, yyvsp[-3].expr, NULL, yyvsp[0].stmt, false); ;
    break;}
case 72:
#line 377 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-6].i.lineNumber, NULL, NULL, yyvsp[-2].expr, yyvsp[0].stmt, false); ;
    break;}
case 73:
#line 379 "cmdgram.y"
{ yyval.stmt = LoopStmtNode::alloc(yyvsp[-5].i.lineNumber, NULL, NULL, NULL, yyvsp[0].stmt, false); ;
    break;}
case 74:
#line 384 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, false ); ;
    break;}
case 75:
#line 386 "cmdgram.y"
{ yyval.stmt = IterStmtNode::alloc( yyvsp[-6].i.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].stmt, true ); ;
    break;}
case 76:
#line 391 "cmdgram.y"
{ yyval.stmt = yyvsp[0].expr; ;
    break;}
case 77:
#line 393 "cmdgram.y"
{ yyval.stmt = yyvsp[0].aen; ;
    break;}
case 78:
#line 398 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 79:
#line 400 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 80:
#line 402 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 81:
#line 404 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 82:
#line 406 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 83:
#line 408 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 84:
#line 410 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 85:
#line 412 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 86:
#line 414 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 87:
#line 416 "cmdgram.y"
{ yyval.expr = FloatBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 88:
#line 418 "cmdgram.y"
{ yyval.expr = FloatUnaryExprNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 89:
#line 420 "cmdgram.y"
{ yyval.expr = TTagDerefNode::alloc( yyvsp[-1].i.lineNumber, yyvsp[0].expr ); ;
    break;}
case 90:
#line 422 "cmdgram.y"
{ yyval.expr = TTagExprNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 91:
#line 424 "cmdgram.y"
{ yyval.expr = ConditionalExprNode::alloc( yyvsp[-4].expr->dbgLineNumber, yyvsp[-4].expr, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 92:
#line 426 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 93:
#line 428 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 94:
#line 430 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 95:
#line 432 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 96:
#line 434 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 97:
#line 436 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 98:
#line 438 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 99:
#line 440 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 100:
#line 442 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 101:
#line 444 "cmdgram.y"
{ yyval.expr = IntBinaryExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-1].i.value, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 102:
#line 446 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, true); ;
    break;}
case 103:
#line 448 "cmdgram.y"
{ yyval.expr = StreqExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, false); ;
    break;}
case 104:
#line 450 "cmdgram.y"
{ yyval.expr = StrcatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].i.value); ;
    break;}
case 105:
#line 452 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 106:
#line 454 "cmdgram.y"
{ yyval.expr = IntUnaryExprNode::alloc(yyvsp[-1].i.lineNumber, yyvsp[-1].i.value, yyvsp[0].expr); ;
    break;}
case 107:
#line 456 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, true); ;
    break;}
case 108:
#line 458 "cmdgram.y"
{ yyval.expr = FloatNode::alloc( yyvsp[0].f.lineNumber, yyvsp[0].f.value ); ;
    break;}
case 109:
#line 460 "cmdgram.y"
{ yyval.expr = IntNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value ); ;
    break;}
case 110:
#line 462 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].i.lineNumber, StringTable->insert("break")); ;
    break;}
case 111:
#line 464 "cmdgram.y"
{ yyval.expr = SlotAccessNode::alloc( yyvsp[0].slot.lineNumber, yyvsp[0].slot.object, yyvsp[0].slot.array, yyvsp[0].slot.slotName ); ;
    break;}
case 112:
#line 466 "cmdgram.y"
{ yyval.expr = InternalSlotAccessNode::alloc( yyvsp[0].intslot.lineNumber, yyvsp[0].intslot.object, yyvsp[0].intslot.slotExpr, yyvsp[0].intslot.recurse); ;
    break;}
case 113:
#line 468 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 114:
#line 470 "cmdgram.y"
{ yyval.expr = StrConstNode::alloc( yyvsp[0].str.lineNumber, yyvsp[0].str.value, false); ;
    break;}
case 115:
#line 472 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value, NULL); ;
    break;}
case 116:
#line 474 "cmdgram.y"
{ yyval.expr = (ExprNode*)VarNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, yyvsp[-1].expr ); ;
    break;}
case 117:
#line 476 "cmdgram.y"
{
         const U32 bufLen = 64;
         UTF8 buffer[bufLen];
         dSprintf(buffer, bufLen, "__anonymous_function%d", gAnonFunctionID++);
         StringTableEntry fName = StringTable->insert(buffer);
         StmtNode *fndef = FunctionDeclStmtNode::alloc(yyvsp[-6].i.lineNumber, fName, NULL, yyvsp[-4].param, yyvsp[-1].stmt);

         if(!gAnonFunctionList)
            gAnonFunctionList = fndef;
         else
            gAnonFunctionList->append(fndef);

         yyval.expr = StrConstNode::alloc( yyvsp[-6].i.lineNumber, (UTF8*)fName, false );
      ;
    break;}
case 118:
#line 494 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.slot.object = yyvsp[-2].expr; yyval.slot.slotName = yyvsp[0].s.value; yyval.slot.array = NULL; ;
    break;}
case 119:
#line 496 "cmdgram.y"
{ yyval.slot.lineNumber = yyvsp[-5].expr->dbgLineNumber; yyval.slot.object = yyvsp[-5].expr; yyval.slot.slotName = yyvsp[-3].s.value; yyval.slot.array = yyvsp[-1].expr; ;
    break;}
case 120:
#line 501 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = false; ;
    break;}
case 121:
#line 503 "cmdgram.y"
{ yyval.intslot.lineNumber = yyvsp[-2].expr->dbgLineNumber; yyval.intslot.object = yyvsp[-2].expr; yyval.intslot.slotExpr = yyvsp[0].expr; yyval.intslot.recurse = true; ;
    break;}
case 122:
#line 508 "cmdgram.y"
{ yyval.expr = ConstantNode::alloc( yyvsp[0].s.lineNumber, yyvsp[0].s.value ); ;
    break;}
case 123:
#line 510 "cmdgram.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 124:
#line 515 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = opPLUSPLUS; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 125:
#line 517 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[0].i.lineNumber; yyval.asn.token = opMINUSMINUS; yyval.asn.expr = FloatNode::alloc( yyvsp[0].i.lineNumber, 1 ); ;
    break;}
case 126:
#line 519 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '+'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 127:
#line 521 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '-'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 128:
#line 523 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '*'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 129:
#line 525 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '/'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 130:
#line 527 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '%'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 131:
#line 529 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '&'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 132:
#line 531 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '^'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 133:
#line 533 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = '|'; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 134:
#line 535 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHL; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 135:
#line 537 "cmdgram.y"
{ yyval.asn.lineNumber = yyvsp[-1].i.lineNumber; yyval.asn.token = opSHR; yyval.asn.expr = yyvsp[0].expr; ;
    break;}
case 136:
#line 542 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 137:
#line 544 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 138:
#line 546 "cmdgram.y"
{ yyval.expr = yyvsp[0].od; ;
    break;}
case 139:
#line 548 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-2].s.lineNumber, yyvsp[-2].s.value, NULL, yyvsp[0].expr, TypeNode::alloc(yyvsp[-2].s.lineNumber, rwSTRING, true)); ;
    break;}
case 140:
#line 550 "cmdgram.y"
{ yyval.expr = yyvsp[-1].aen; ;
    break;}
case 141:
#line 552 "cmdgram.y"
{ yyval.expr = AssignExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-5].s.value, yyvsp[-3].expr, yyvsp[0].expr, TypeNode::alloc(yyvsp[-5].s.lineNumber, rwSTRING, true)); ;
    break;}
case 142:
#line 554 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-1].s.lineNumber, yyvsp[-1].s.value, NULL, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 143:
#line 556 "cmdgram.y"
{ yyval.expr = AssignOpExprNode::alloc( yyvsp[-4].s.lineNumber, yyvsp[-4].s.value, yyvsp[-2].expr, yyvsp[0].asn.expr, yyvsp[0].asn.token); ;
    break;}
case 144:
#line 558 "cmdgram.y"
{ yyval.expr = SlotAssignOpNode::alloc( yyvsp[-1].slot.lineNumber, yyvsp[-1].slot.object, yyvsp[-1].slot.slotName, yyvsp[-1].slot.array, yyvsp[0].asn.token, yyvsp[0].asn.expr); ;
    break;}
case 145:
#line 560 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-2].slot.lineNumber, yyvsp[-2].slot.object, yyvsp[-2].slot.array, yyvsp[-2].slot.slotName, yyvsp[0].expr); ;
    break;}
case 146:
#line 562 "cmdgram.y"
{ yyval.expr = SlotAssignNode::alloc( yyvsp[-4].slot.lineNumber, yyvsp[-4].slot.object, yyvsp[-4].slot.array, yyvsp[-4].slot.slotName, yyvsp[-1].expr); ;
    break;}
case 147:
#line 567 "cmdgram.y"
{ yyval.aen = AssignExprNode::alloc( yyvsp[-4].s.lineNumber, yyvsp[-4].s.value, NULL, yyvsp[0].expr, yyvsp[-2].typeNode); ;
    break;}
case 148:
#line 572 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-3].s.lineNumber, yyvsp[-3].s.value, NULL, yyvsp[-1].expr, false); ;
    break;}
case 149:
#line 574 "cmdgram.y"
{ yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].s.lineNumber, yyvsp[-3].s.value, yyvsp[-5].s.value, yyvsp[-1].expr, false); ;
    break;}
case 150:
#line 576 "cmdgram.y"
{ yyvsp[-5].expr->append(yyvsp[-1].expr); yyval.expr = FuncCallExprNode::alloc( yyvsp[-5].expr->dbgLineNumber, yyvsp[-3].s.value, NULL, yyvsp[-5].expr, true); ;
    break;}
case 151:
#line 578 "cmdgram.y"
{ yyval.expr = FuncPointerCallExprNode::alloc( yyvsp[-3].expr->dbgLineNumber, yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 152:
#line 583 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-3].i.lineNumber, yyvsp[-1].expr, NULL ); ;
    break;}
case 153:
#line 585 "cmdgram.y"
{ yyval.expr = AssertCallExprNode::alloc( yyvsp[-5].i.lineNumber, yyvsp[-3].expr, yyvsp[-1].str.value ); ;
    break;}
case 154:
#line 590 "cmdgram.y"
{ yyval.expr = NULL; ;
    break;}
case 155:
#line 592 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 156:
#line 597 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 157:
#line 599 "cmdgram.y"
{ (yyvsp[-2].expr)->append(yyvsp[0].expr); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 158:
#line 604 "cmdgram.y"
{ yyval.slist = NULL; ;
    break;}
case 159:
#line 606 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 160:
#line 611 "cmdgram.y"
{ yyval.slist = yyvsp[0].slist; ;
    break;}
case 161:
#line 613 "cmdgram.y"
{ yyvsp[-1].slist->append(yyvsp[0].slist); yyval.slist = yyvsp[-1].slist; ;
    break;}
case 162:
#line 618 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].s.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr); ;
    break;}
case 163:
#line 620 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-4].i.lineNumber, NULL, NULL, yyvsp[-3].s.value, yyvsp[-1].expr, yyvsp[-4].i.value); ;
    break;}
case 164:
#line 622 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-3].i.lineNumber, NULL, NULL, StringTable->insert("datablock"), yyvsp[-1].expr); ;
    break;}
case 165:
#line 624 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-6].s.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-6].s.value, yyvsp[-1].expr); ;
    break;}
case 166:
#line 626 "cmdgram.y"
{ yyval.slist = SlotAssignNode::alloc( yyvsp[-7].i.lineNumber, NULL, yyvsp[-4].expr, yyvsp[-6].s.value, yyvsp[-1].expr, yyvsp[-7].i.value); ;
    break;}
case 167:
#line 631 "cmdgram.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 168:
#line 633 "cmdgram.y"
{ yyval.expr = CommaCatExprNode::alloc( yyvsp[-2].expr->dbgLineNumber, yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 169:
#line 638 "cmdgram.y"
{ yyval.typeNode = TypeNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value, true); ;
    break;}
case 170:
#line 640 "cmdgram.y"
{ yyval.typeNode = TypeNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value, true); ;
    break;}
case 171:
#line 642 "cmdgram.y"
{ yyval.typeNode = TypeNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value, true); ;
    break;}
case 172:
#line 644 "cmdgram.y"
{ yyval.typeNode = TypeNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value, true); ;
    break;}
case 173:
#line 646 "cmdgram.y"
{ yyval.typeNode = TypeNode::alloc( yyvsp[0].i.lineNumber, yyvsp[0].i.value, false); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 648 "cmdgram.y"


